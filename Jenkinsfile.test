/* Jenkinsfile.test
 *
 * After merging the develop branch into the test branch, this will work to 
 * build and deploy changes to the OpenShift test environment. 
 *
 */

pipeline {
    agent none
    stages {
        stage('Build & Deploy Test Environment') {
                options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'feature/pr-611-test-branch' ) } }
            environment {
                    BRANCH_LOWER = BRANCH_NAME.toLowerCase()
                    VANITY_URL = "${BRANCH_LOWER}.pharmanetenrolment.gov.bc.ca"
                    SCHEMA = "https"
                    PORT = "8443"
                    FRONTEND_ARGS = "-p REDIRECT_URL=${SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
                    API_ARGS = "-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${VANITY_URL}"
                    SUFFIX= "${BRANCH_LOWER}"
            }
            agent { label 'master' }
            steps {
                script {
                    // Generate release prior to deploy to production, and request release tag name and description from user
                    def releaseTag = input(
                            id: 'Release Version Tag', message: "Please provide this release's version tag. A BETA suffix will be added to denote that this is a prerelease, and not production ready.", ok: "Submit", parameters: [
                            string(name: 'Version Tag', description: 'A version number that will tag and easily identify this release.')
                        ])
                    def releaseTitle = input(
                            id: 'Release Title', message: "Please provide an appropriate title for this release.", ok: "Submit", parameters: [
                            string(name: 'Release Title', description: 'A title that summarizes the new features and modifications that are contained in this release. ')
                        ])
                    def releaseBody = input(
                            id: 'Description', message: "Please provide a description, in GitHub-style Markdown, of the features included in this release.", ok: "Submit", parameters: [
                            string(name: 'Release Description')
                        ])
                    def isPrerelease = true
                    sh "./player.sh createRelease ${releaseTag} ${releaseTitle} ${releaseBody} ${isPrerelease}"

                    echo "Building (TEST) branch ..."
                    sh "./player.sh build api dev ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build frontend dev ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build document-manager dev -p SUFFIX=${SUFFIX}"

                    echo "Deploying (TEST) branch ..."
                    sh "./player.sh deploy postgres dev -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy redis dev -p SUFFIX=${SUFFIX}"
                    // sh "./player.sh deploy mongo test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy api dev ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy frontend dev ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy document-manager dev -p SUFFIX=${SUFFIX} -p VOLUME_CAPACITY=1Gi"
                    sh "./player.sh toolbelt schemaspy dev"
                }
            }
        }
        stage('Quality Check') {
            options {
                timeout(time: 30, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'test' ) } }
            parallel {
                stage('SonarQube Code Check') {
                    agent { label 'code-tests' }
                    steps {
                        sh "./player.sh scan"
                    }      
                }
                stage('ZAP') {
                    agent { label 'code-tests' }
                    steps {
                        checkout scm
                        echo "Scanning..."
                        sh "./player.sh zap frontend"
                    }
                }
            }
        }
    }
}