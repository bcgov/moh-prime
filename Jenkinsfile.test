/* Jenkinsfile.test
 *
 * After merging the develop branch into the test branch, this will work to 
 * build and deploy changes to the OpenShift test environment. 
 *
 */

pipeline {
    agent none
    stages {
        stage('Build & Deploy Test Environment') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'test' ) } }
            environment {
                    BRANCH_LOWER = BRANCH_NAME.toLowerCase()
                    VANITY_URL = "test.pharmanetenrolment.gov.bc.ca"
                    SCHEMA = "https"
                    PORT = "8443"
                    FRONTEND_ARGS = "-p REDIRECT_URL=${SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
                    API_ARGS = "-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${VANITY_URL}"
                    SUFFIX= "-test"
            }
            agent { label 'master' }
            steps {
                script {
                    echo "Build & deploy (TEST) branch ..."
                    sh "./player.sh build api test ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build frontend test ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build document-manager test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy postgres test -p SUFFIX=${SUFFIX}"
                    // sh "./player.sh deploy mongo test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy api test ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy frontend test ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy document-manager test -p SUFFIX=${SUFFIX} -p VOLUME_CAPACITY=1Gi"                    
                    sh "./player.sh toolbelt schemaspy test"
                }
            }
        }
        stage('Quality Check') {
            options {
                timeout(time: 30, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'test' ) } }
            parallel {
                stage('SonarQube Code Check') {
                    agent { label 'code-tests' }
                    steps {
                        sh "./player.sh scan"
                    }      
                }
                stage('ZAP') {
                    agent { label 'code-tests' }
                    steps {
                        checkout scm
                        echo "Scanning..."
                        sh "./player.sh zap frontend"
                    }
                }
            }
        }
    }
}