---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prime
  description: >-
    Deployment template for the Ministry of Health PharmaNet Revisions for Information Management Enhancements
parameters:
- name: SVC_NAME
  displayName: Name
  description: A name appended to all objects
  required: true
  value: prime
- name: IMAGE_TAG
  displayName: Image Tag
  description: an identifier that labels which version an image belongs to.
  required: true
- name: OC_NAMESPACE
  displayName: OpenShift License Plate
  description: Prepends your dev/test/prod URL
  required: true
  value: 9c33a9
- name: OC_APP
  displayName: Openshift Environment
  description: dev/test/prod
  required: true
- name: FRONTEND_URL
  displayName: Frontend URL
  description: Minus the HTTP/HTTPS, this is your vanity URL or the prefix of your default URL
  required: true
  value: frontend
- name: ASP_ENV
  displayName: ASP.NET Environment
  description: Development or Production
  required: true
  value: Development
- name: WEB_PORT
  displayName: Web Port for NGINX
  description: Termination port on NGINX (8080 or 8443)
  value: "8080"
- name: URL_STUB
  displayName: URL Stub
  description: Appended to all URLs, used in PRs
  value: ".pharmanetenrolment.gov.bc.ca"
  required: false
- name: HPR_URL
  displayName: Health Practicioner URL
  value: ""
- name: MAUTH_URL
  displayName: MUTUAL_AUTHENTICATION URL
  value: ""
- description: Maximum amount of memory the container can use.
  displayName: Postgres Memory Limit
  name: POSTGRES_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the PostgreSQL ImageStream resides.
  displayName: PostgreSQL Namespace
  name: POSTGRES_NAMESPACE
  value: openshift
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  value: prime-user
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  name: POSTGRESQL_PASSWORD
  value: pr-db-password
  required: true
- description: Password for the PostgreSQL admin user.
  displayName: PostgreSQL admin Password
  name: POSTGRESQL_ADMIN_PASSWORD
  value: Shojuwie8Seijaereir5isee
  required: true
- description: Version of PostgreSQL image to be used (10-el7, 10-el8, or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: 10-el8
objects:
###########################################
###               Frontend              ###
###########################################
#   Frontend Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    annotations:
      app.openshift.io/connects-to: >-
        [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${SVC_NAME}-webapi"}]  
    name: ${SVC_NAME}-frontend
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: nginx
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-frontend
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-frontend
      spec:
        containers:
          - name: ${SVC_NAME}-frontend
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/prime-frontend:${IMAGE_TAG}
            ports:
              - containerPort: 80
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
              - containerPort: 8888
                protocol: TCP
              - containerPort: 8890
                protocol: TCP
            resources: {}
            envFrom:
              - configMapRef:
                  name: keycloak
            env:
              - name: DOCUMENT_MANAGER_URL
                value: https://${SVC_NAME}${URL_STUB}/api/docman
            readinessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 5
              periodSeconds: 5
            livenessProbe:
              httpGet:
                path: /
                port: 8080
              initialDelaySeconds: 5
              failureThreshold: 1
              periodSeconds: 5
            volumeMounts:
            - name: vanity-tls-certs
              readOnly: true
              mountPath: /opt/bitnami/nginx/conf/certs
            - name: plr-integration-volume
              readOnly: true
              mountPath: /opt/bitnami/nginx/conf/certs/plr
            - name: nginx-config
              readOnly: true
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
            - name: env-config
              readOnly: true
              mountPath: /opt/app-root/src/assets/config-map.json
              subPath: config-map.json
        volumes:
        - name: vanity-tls-certs
          secret:
            secretName: vanity-tls-certificate
            defaultMode: 420
        - name: nginx-config
          configMap:
            name: ${SVC_NAME}-nginx-config
            defaultMode: 420
        - name: plr-integration-volume
          secret:
            secretName: plr-integration
            defaultMode: 420
        - name: env-config
          configMap:
            name: ${SVC_NAME}-env-config
            defaultMode: 420
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-frontend
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'prime-frontend:${IMAGE_TAG}'

#   Environment file
- apiVersion: v1
  kind: ConfigMap  
  metadata:
    name: ${SVC_NAME}-env-config
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  data:
    config-map.json: |-
      {
        "environmentName": "dev",
        "apiEndpoint": "https://${SVC_NAME}.pharmanetenrolment.gov.bc.ca/api/v1",
        "loginRedirectUrl": "https://${SVC_NAME}.pharmanetenrolment.gov.bc.ca",
        "documentManagerUrl": "https://${SVC_NAME}.pharmanetenrolment.gov.bc.ca/api/docman",
        "keycloakConfig": {
          "config": {
            "url": "https://dev.oidc.gov.bc.ca/auth",
            "realm": "v4mbqqas",
            "clientId": "prime-application-dev"
          }
        }
      }

#   NGINX Configuration
- apiVersion: v1
  kind: ConfigMap  
  metadata:
    name: ${SVC_NAME}-nginx-config
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  data:
    nginx.conf: |-
      # Based on https://www.nginx.com/resources/wiki/start/topics/examples/full/#nginx-conf
      #user              www www;  ## Default: nobody

      worker_processes  auto;
      error_log         "/opt/bitnami/nginx/logs/error.log";
      pid               "/opt/bitnami/nginx/tmp/nginx.pid";

      events {
          worker_connections  1024;
      }

      http {
          include       mime.types;
          default_type  application/octet-stream;
          log_format    main '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status  $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
          access_log    "/opt/bitnami/nginx/logs/access.log" main;
          # add_header    X-Frame-Options SAMEORIGIN;

          client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
          proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
          fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
          scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
          uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

          sendfile           on;
          # tcp_nopush         on;
          tcp_nodelay        off;
          gzip               on;
          gzip_http_version  1.0;
          gzip_comp_level    2;
          gzip_proxied       any;
          gzip_types         text/plain text/css application/javascript text/xml application/xml+rss;
          keepalive_timeout  65;
          ssl_protocols      TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
          ssl_ciphers        HIGH:!aNULL:!MD5;
          client_max_body_size 80M;
          server_tokens off;

        server {
          listen 8080;
          server_name localhost *.gov.bc.ca;
          server_tokens off;

          root /opt/app-root/src;
          index index.html index.htm;

          include mime.types;
          add_header X-Frame-Options "ALLOW-FROM dev.oidc.gov.bc.ca" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Content-Security-Policy "frame-ancestors 'self'  dev.oidc.gov.bc.ca; style-src 'unsafe-inline' 'self' https://fonts.googleapis.com https://fonts.gstatic.com ; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com" always;
          add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade";

          gzip on;
          gzip_min_length 1000;
          gzip_proxied expired no-cache no-store private auth;
          gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          location / {
            try_files $uri $uri/ /index.html$args;
          }
          location /api/docman/ {
            proxy_pass http://${SVC_NAME}-document-manager:6001/;
          }
          location /api/v1/ {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/;
          }
          location /api/v1/PLRHL7 {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/PLRHL7;
            #        proxy_set_header  X-SSL-CERT $ssl_client_escaped_cert;
          }
          location /nginx_status {
            # Enable Nginx stats
            stub_status on;
            # Only allow access from localhost
            allow 127.0.0.1;
            # Other request should be denied
            deny all;
            # No need to log this request, its just noise
            access_log on;
          }
        }
        server {
          listen 8443 ssl;
          server_name *.gov.bc.ca;
          ssl_password_file certs/passwd.txt;
          ssl_certificate certs/chained.crt;
          ssl_certificate_key certs/private.key;
          server_tokens off;
          #    ssl_verify_client   optional_no_ca;

          root /opt/app-root/src;
          index index.html index.htm;

          add_header X-Frame-Options "ALLOW-FROM dev.oidc.gov.bc.ca" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Content-Security-Policy "frame-ancestors 'self'  dev.oidc.gov.bc.ca; style-src 'unsafe-inline' 'self' https://fonts.googleapis.com https://fonts.gstatic.com ; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com" always;
          add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade";

          gzip on;
          gzip_min_length 1000;
          gzip_proxied expired no-cache no-store private auth;
          gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          location / {
            try_files $uri $uri/ /index.html$args;
          }
          location /api/docman/ {
            proxy_pass http://${SVC_NAME}-document-manager:6001/;
          }
          location /api/v1/ {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/;
          }
          location /api/v1/PLRHL7 {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/PLRHL7;
            #        proxy_set_header  X-SSL-CERT $ssl_client_escaped_cert;
          }
          location /nginx_status {
            # Enable Nginx stats
            stub_status on;

            # Only allow access from localhost
            allow 127.0.0.1;

            # Other request should be denied
            deny all;

            # No need to log this request, its just noise
            access_log on;
          }
        }
        server {
          listen 8888;
          server_name *.gov.bc.ca;
          server_tokens off;

          root /opt/app-root/src;
          index index.html index.htm;

          add_header X-Frame-Options "ALLOW-FROM dev.oidc.gov.bc.ca" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header Content-Security-Policy "frame-ancestors 'self'  dev.oidc.gov.bc.ca; style-src 'unsafe-inline' 'self' https://fonts.googleapis.com https://fonts.gstatic.com ; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com" always;
          add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade";
          gzip on;
          gzip_min_length 1000;
          gzip_proxied expired no-cache no-store private auth;
          gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          location / {
            try_files $uri $uri/ /index.html$args;
          }
          location /api/docman/ {
            proxy_pass http://${SVC_NAME}-document-manager:6001;
          }
          location /api/v1/ {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/;
          }
          location /nginx_status {
            # Enable Nginx stats
            stub_status on;
            # Only allow access from localhost
            allow 127.0.0.1;
            # Other request should be denied
            deny all;
            # No need to log this request, its just noise
            access_log on;
          }
        }
        server {
          # Block for API end-points that require a client certificate (Multual Authentication)
          listen 8890 ssl;
          server_name *.gov.bc.ca;
          ssl_password_file certs/passwd.txt;
          ssl_certificate certs/chained.crt;
          ssl_certificate_key certs/private.key;
          server_tokens off;
          # `ssl_verify_client` should be `on` in production
          ssl_verify_client optional_no_ca;
          root /opt/app-root/src;
          index index.html index.htm;

          # add_header X-Frame-Options "ALLOW-FROM dev.oidc.gov.bc.ca" always;
          # add_header X-XSS-Protection "1; mode=block" always;
          # add_header Content-Security-Policy "frame-ancestors 'self'  dev.oidc.gov.bc.ca; style-src 'unsafe-inline' 'self' https://fonts.googleapis.com https://fonts.gstatic.com ; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com" always;
          add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;
          add_header X-Content-Type-Options "nosniff" always;
          # add_header Referrer-Policy "no-referrer-when-downgrade";
          gzip on;
          gzip_min_length 1000;
          gzip_proxied expired no-cache no-store private auth;
          gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

          location /api/v1/PLRHL7 {
            proxy_pass http://${SVC_NAME}-webapi:8080/api/PLRHL7;
            proxy_set_header X-SSL-CERT $ssl_client_escaped_cert;
          }
        }
      }

#   Frontend Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-frontend
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: "http"
        port: 8080
        targetPort: 8080
      - name: "https"
        port: 8443
        targetPort: 8443
      - name: "hpr"
        port: 8888
        targetPort: 8888
      - name: "mutualauth"
        port: 8890
        targetPort: 8890
    selector:
      name: ${SVC_NAME}-frontend
#   Ingress
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: ${SVC_NAME}
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    tls:
      - hosts:
        - '${SVC_NAME}.pharmanetenrolment.gov.bc.ca'
        - '${SVC_NAME}-hpr.pharmanetenrolment.gov.bc.ca'
        secretName: pharmanetenrolment-tls
    rules:
      - host: '${SVC_NAME}.pharmanetenrolment.gov.bc.ca'
        http:
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: ${SVC_NAME}-frontend
                  port:
                    number: 8080
      - host: '${SVC_NAME}-hpr.pharmanetenrolment.gov.bc.ca'
        http:
          paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: ${SVC_NAME}-frontend
                  port:
                    number: 8888
- apiVersion: route.openshift.io/v1
  kind: Route
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-mutualauth
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    host: ${SVC_NAME}-mutualauth${URL_STUB}
    to:
      kind: Service
      name: ${SVC_NAME}-frontend
      weight: 100
    port:
      targetPort: 8890
    tls:
      termination: passthrough
      insecureEdgeTerminationPolicy: Redirect
    wildcardPolicy: None

###########################################
###           Backend Web API           ###
###########################################
#   Backend Web API Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    annotations:
      app.openshift.io/connects-to: >-
        ["[{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${SVC_NAME}-postgres"}]
        [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${SVC_NAME}-document-manager"}]"]
    name: ${SVC_NAME}-webapi
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: dotnet
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-webapi
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-webapi
      spec:
        initContainers:
        - name: run-migrations
          image: >-
            image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/prime-webapi-backend:${IMAGE_TAG}
          env:
          - name: PGHOST
            value: ${SVC_NAME}-postgres
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: pr-database-secrets                    
                key: database-user
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: pr-database-secrets
                key: database-password
          - name: PGDATABASE
            value: prime-${SVC_NAME}
          command: ['psql', '-a', '-f', './databaseMigrations.sql']
        containers:
          - name: ${SVC_NAME}-webapi
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/prime-webapi-backend:${IMAGE_TAG}
            command:
              - bash
              - '-c'
              - dotnet ./prime.dll -v 2>&1> /dev/stdout
            env:
              - name: DOCUMENT_MANAGER_CLIENT_ID
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: DOCUMENT_MANAGER_CLIENT_ID
              - name: DOCUMENT_MANAGER_URL
                value: http://${SVC_NAME}-document-manager:6001
              - name: PHARMANET_SSL_CERT_FILENAME
                value: /opt/app-root/etc/certs/pharmanet-api-cert.pfx
              - name: DB_HOST
                value: ${SVC_NAME}-postgres
              - name: BACKEND_URL
                value: https://${SVC_NAME}${URL_STUB}/api/v1/
              - name: FRONTEND_URL
                value: https://${SVC_NAME}${URL_STUB}
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets                    
                    key: database-user
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets
                    key: database-password
              - name: POSTGRESQL_DATABASE
                value: prime-${SVC_NAME}
              - name: DB_CONNECTION_STRING
                value: "host=$(DB_HOST);port=5432;database=$(POSTGRESQL_DATABASE);username=$(POSTGRESQL_USER);password=$(POSTGRESQL_PASSWORD)"
            ports:
              - containerPort: 1025
                protocol: TCP
              - containerPort: 5001
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
            startupProbe:
              httpGet:
                path: /api/healthcheck
                port: 8080
              failureThreshold: 30
              periodSeconds: 10
            readinessProbe:
              httpGet:
                path: /api/healthcheck
                port: 8080
              initialDelaySeconds: 5
              periodSeconds: 5
            livenessProbe:
              httpGet:
                path: /api/healthcheck
                port: 8080
              failureThreshold: 1
              periodSeconds: 5
            imagePullPolicy: IfNotPresent
            terminationMessagePolicy: File
            envFrom:
              - configMapRef:
                  name: canada-post-addresscomplete
              - configMapRef:
                  name: ches
              - configMapRef:
                  name: dotnet-webapi-backend
              - configMapRef:
                  name: keycloak
              - configMapRef:
                  name: ldap
              - configMapRef:
                  name: mail-settings
              - configMapRef:
                  name: metabase-embedded
              - configMapRef:
                  name: pharmanet-api
              - configMapRef:
                  name: verifiable-credential
              - secretRef:
                  name: canada-post-addresscomplete-secrets
              - secretRef:
                  name: ches-secrets
              - secretRef:
                  name: document-manager-secrets
              - secretRef:
                  name: keycloak-secrets
              - secretRef:
                  name: metabase-embedded-secrets
              - secretRef:
                  name: pharmanet-api-secrets
              - secretRef:
                  name: verifiable-credential-secrets
              - secretRef:
                  name: plr-integration-thumbprint
            volumeMounts:
              - name: cert-volume
                mountPath: /opt/app-root/etc/certs
                readOnly: true
        volumes:
          - name: cert-volume
            secret:
              secretName: pharmanet-api-ssl-certs
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-webapi
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'prime-webapi-backend:${IMAGE_TAG}'
  
#   Backend Web API Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-webapi
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: "http"
        port: 8080
        targetPort: 8080
    selector:
      name: ${SVC_NAME}-webapi

###########################################
###      Document Manager (backend)     ###
###########################################
#   Document Manager (backend) Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-document-manager
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: python
    annotations:
      app.openshift.io/connects-to: >-
        [{"apiVersion":"apps.openshift.io/v1","kind":"DeploymentConfig","name":"${SVC_NAME}-redis"}]
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-document-manager
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-document-manager
      spec:
        initContainers:
        - name: run-migrations
          image: >-
            image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/prime-document-manager:${IMAGE_TAG}
          env:
            - name: CACHE_REDIS_HOST
              value: ${SVC_NAME}-redis
            - name: CACHE_REDIS_PASS
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: database-password
            - name: CACHE_REDIS_PORT
              value: "6379"
            - name: DB_HOST
              value: ${SVC_NAME}-postgres
            - name: DB_NAME
              value: prime-${SVC_NAME}
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: pr-database-secrets
                  key: database-password
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: pr-database-secrets
                  key: database-user
            - name: DOCUMENT_MANAGER_URL
              value: "https://${SVC_NAME}${URL_STUB}/api/docman/"
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: document-manager
                  key: FLASK_ENV
            - name: FLASK_RUN_HOST
              valueFrom:
                configMapKeyRef:
                  name: document-manager
                  key: FLASK_RUN_HOST
            - name: FLASK_DEBUG
              valueFrom:
                configMapKeyRef:
                  name: document-manager
                  key: FLASK_DEBUG
            - name: FLASK_APP
              valueFrom:
                configMapKeyRef:
                  name: document-manager
                  key: FLASK_APP
            - name: FLASK_RUN_PORT
              valueFrom:
                configMapKeyRef:
                  name: document-manager
                  key: FLASK_RUN_PORT
            - name: JWT_OIDC_WELL_KNOWN_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: JWT_WELL_KNOWN_CONFIG
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: pr-database-secrets
                  key: database-password
          command:
            # Script force waits migration pod execution until PostgreSQL is verified to 
            # be open to query connections.
            - /opt/app-root/src/app.sh
          args: 
            - migrate
        containers:
          - name: ${SVC_NAME}-document-manager
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/prime-document-manager:${IMAGE_TAG}
            env:
              - name: CACHE_REDIS_HOST
                value: ${SVC_NAME}-redis
              - name: CACHE_REDIS_PASS
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
              - name: CACHE_REDIS_PORT
                value: "6379"
              - name: DB_HOST
                value: ${SVC_NAME}-postgres
              - name: DB_NAME
                value: prime-${SVC_NAME}
              - name: DB_PASS
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets
                    key: database-password
              - name: DB_PORT
                value: "5432"
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets
                    key: database-user
              - name: DOCUMENT_MANAGER_URL
                value: "https://${SVC_NAME}${URL_STUB}/api/docman/"
              - name: FLASK_ENV
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: FLASK_ENV
              - name: FLASK_RUN_HOST
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: FLASK_RUN_HOST
              - name: FLASK_DEBUG
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: FLASK_DEBUG
              - name: FLASK_APP
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: FLASK_APP
              - name: FLASK_RUN_PORT
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: FLASK_RUN_PORT
              - name: JWT_OIDC_WELL_KNOWN_CONFIG
                valueFrom:
                  configMapKeyRef:
                    name: keycloak
                    key: JWT_WELL_KNOWN_CONFIG
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets
                    key: database-password
            volumeMounts:
            # Mount Document Manager to PVC
              - mountPath: /app/
                name: ${SVC_NAME}-document-manager-data
            ports:
              - containerPort: 6001
                protocol: TCP
              - containerPort: 9191
                protocol: TCP
            startupProbe:
              httpGet:
                path: /healthcheck
                port: 6001
              failureThreshold: 30
              periodSeconds: 10
            readinessProbe:
              httpGet:
                path: /healthcheck
                port: 6001
              initialDelaySeconds: 5
              periodSeconds: 5
        volumes:
          - name: ${SVC_NAME}-document-manager-data
            emptyDir: {}
          - name: ${SVC_NAME}-document-manager-run
            emptyDir: {}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-document-manager
          from:
            kind: ImageStreamTag
            namespace: "${OC_NAMESPACE}-tools"
            name: 'prime-document-manager:${IMAGE_TAG}'
  
#   Document Manager (backend) Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-document-manager
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: "${SVC_NAME}-document-manager"
        port: 6001
        targetPort: 6001
    selector:
      name: ${SVC_NAME}-document-manager

###########################################
###         PostgreSQL Database         ###
###########################################
#   PostgreSQL database Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-postgres
    namespace: ${OC_NAMESPACE}-${OC_APP}
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: postgresql
  spec:
    replicas: 1
    selector:
      name: ${SVC_NAME}-postgres
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-postgres
      spec:
        containers:
          - capabilities: {}
            env:
              - name: DB_HOST
                value: ${SVC_NAME}-postgres
              # PostgreSQL environment variables
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets                    
                    key: database-user
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: pr-database-secrets
                    key: database-password
              - name: POSTGRESQL_DATABASE
                value: prime-${SVC_NAME}
            image: >-
              image-registry.openshift-image-registry.svc:5000/${POSTGRES_NAMESPACE}/postgresql:${POSTGRESQL_VERSION}
            imagePullPolicy: IfNotPresent
            lifecycle:
              preStop:
                exec:
                  command: ['pg_ctl', 'stop']
            livenessProbe:
              exec:
                command:
                - /usr/libexec/check-container
                - --live
              initialDelaySeconds: 120
              timeoutSeconds: 10
            readinessProbe:
              exec:
                command:
                - /usr/libexec/check-container
              initialDelaySeconds: 5
              timeoutSeconds: 1
            name: ${SVC_NAME}-postgres
            ports:
              - containerPort: 5432
                protocol: TCP
                name: postgresql
            resources:
              limits:
                memory: ${POSTGRES_MEMORY_LIMIT}
            securityContext:
              capabilities: {}
              privileged: false
            terminationMessagePath: /dev/termination-log
            volumeMounts:
              - mountPath: /var/lib/pgsql/data
                name: ${SVC_NAME}-postgres-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - name: ${SVC_NAME}-postgres-data
            emptyDir: {}

#   PostgreSQL Secret
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${SVC_NAME}-postgres
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  stringData:
    admin-password: ${POSTGRESQL_ADMIN_PASSWORD}
    database-name: prime-${SVC_NAME}
    database-password: ${POSTGRESQL_PASSWORD}
    database-user: prime-user

#   PostgreSQL Service
- apiVersion: v1
  kind: Service
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-postgres
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
    annotations: 
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
  spec:
    ports:
      - name: postgres
        nodePort: 0
        port: 5432
        protocol: TCP
        targetPort: 5432
    selector:
      name: ${SVC_NAME}-postgres
    sessionAffinity: None
    type: ClusterIP

###########################################
###                Redis                ###
###########################################
#   Redis Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  namespace: ${OC_NAMESPACE}-${OC_APP}
  metadata:
    name: ${SVC_NAME}-redis
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: redis
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-redis
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
      recreateParams:
        timeoutSeconds: 600
      activeDeadlineSeconds: 21600
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-redis
      spec:
        volumes:
          - name: ${SVC_NAME}-redis-data
            emptyDir: {}
        containers:
          - resources:
              limits:
                memory: 512Mi
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" ==
                    "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: redis
            livenessProbe:
              tcpSocket:
                port: 6379
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
              - name: REDIS_PORT
                value: "6379"
            securityContext:
              capabilities: {}
              privileged: false
            ports:
              - containerPort: 6379
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: ${SVC_NAME}-redis-data
                mountPath: /var/lib/redis/data
            terminationMessagePolicy: File
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_NAMESPACE}-tools/redis-6:latest
        restartPolicy: Always
        dnsPolicy: ClusterFirst

#   Redis Service
- kind: Service
  apiVersion: v1
  metadata:
    name: ${SVC_NAME}-redis
    namespace: ${OC_NAMESPACE}-${OC_APP}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: redis
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      name: ${SVC_NAME}-redis
