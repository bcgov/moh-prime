---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prime
  description: >-
    Deployment template for the Ministry of Health PharmaNet Revisions for Information Management Enhancements
parameters:
- name: SVC_NAME
  displayName: Name
  description: A name appended to all objects
  required: true
  value: prime
- name: IMAGE_TAG
  displayName: Image Tag
  description: an identifier that labels which version an image belongs to.
  required: true
- name: OC_LICENSE_PLATE
  displayName: OpenShift License Plate
  description: Prepends your dev/test/prod URL
  required: true
  value: 9c33a9
- name: OC_ENV
  displayName: Openshift Environment
  description: dev/test/prod
  required: true
- name: FRONTEND_REPLICAS
  displayName: Number of frontend pods
  description: For scaling frontend pods
  required: true
  value: '3'
- name: BACKEND_REPLICAS
  displayName: Number of backend pods
  description: For scaling backend pods
  required: true
  value: '3'
- name: VANITY_URL
  displayName: Vanity URL
  description: Minus the HTTP/HTTPS, this is your vanity URL or the prefix of your default URL
  required: true
  value: vanity
- name: ASP_ENV
  displayName: ASP.NET Environment
  description: Development or Production
  required: true
  value: Development
- name: DOCMAN_VOLUME_CAPACITY
  displayName: Document Manager Persistent Volume Capacity
  description: Volume space available for Document Manager Backend data e.g. 512Mi, 2Gi.
  required: true
  value: 5Gi
- name: WEB_PORT
  displayName: Web Port for NGINX
  description: Termination port on NGINX (8080 or 8443)
  value: "8080"
- name: URL_STUB
  displayName: URL Stub
  description: Appended to all URLs, used in PRs
  value: "-9c33a9-dev.apps.silver.devops.gov.bc.ca"
  required: false
- name: HPR_URL
  displayName: Health Practicioner URL
  value: ""
- name: MAUTH_URL
  displayName: MUTUAL_AUTHENTICATION URL
  value: ""
- name: CRON_SCHEDULE_RENEWALS
  description: 'Renewal email sending cron schedule. Cron-like schedule expression. Default: Once a day at 11 PM'
  value: '0 23 * * *'
- name: CRON_SCHEDULE_STATUSES
  description: 'Email status update cron job. Cron-like schedule expression. Default: At minute 0 past every 6th hour.'
  value: '0 */6 * * *'
objects:
###########################################
###           Backend Web API           ###
###########################################
#   Backend Web API Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${SVC_NAME}-webapi
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: dotnet
  spec:
    completionDeadlineSeconds: 1200
    replicas: ${{BACKEND_REPLICAS}}
    selector:
      name: ${SVC_NAME}-webapi
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 120
        maxSurge: "20%"
        maxUnavailable: "10%"
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-webapi
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  topologyKey: kubernetes.io/hostname
                  labelSelector:
                    matchExpressions:
                      - key: deploymentconfig
                        operator: In
                        values:
                          - ${SVC_NAME}-webapi
        initContainers:
        - name: run-migrations
          image: >-
            image-registry.openshift-image-registry.svc:5000/${OC_LICENSE_PLATE}-tools/prime-webapi-backend:${IMAGE_TAG}
          env:
          - name: PGHOST
            valueFrom:
              configMapKeyRef:
                name: database-cm
                key: database-host
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: ${SVC_NAME}-patroni-secret
                key: app-db-username
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SVC_NAME}-patroni-secret
                key: app-db-password
          - name: PGDATABASE
            valueFrom:
              secretKeyRef:
                name: ${SVC_NAME}-patroni-secret
                key: app-db-name
          command: ['psql', '-a', '-f', './databaseMigrations.sql']
        containers:
          - name: ${SVC_NAME}-webapi
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_LICENSE_PLATE}-tools/prime-webapi-backend:${IMAGE_TAG}
            command:
              - bash
              - '-c'
              - dotnet ./prime.dll -v 2>&1> /dev/stdout
            resources:
              limits:
                cpu: 100m
                memory: 1Gi
              requests:
                cpu: 10m
                memory: 500Mi
            env:
              - name: DOCUMENT_MANAGER_CLIENT_ID
                valueFrom:
                  configMapKeyRef:
                    name: document-manager
                    key: DOCUMENT_MANAGER_CLIENT_ID
              - name: OC_APP
                value: ${OC_APP}
              - name: DOCUMENT_MANAGER_URL
                value: http://${SVC_NAME}-document-manager:6001
              - name: PHARMANET_SSL_CERT_FILENAME
                value: /opt/app-root/etc/certs/pharmanet-api-cert.pfx
              - name: DB_HOST
                valueFrom:
                  configMapKeyRef:
                    name: database-cm
                    key: database-host
              - name: BACKEND_URL
                value: https://${VANITY_URL}/api/v1/
              - name: FRONTEND_URL
                value: https://${VANITY_URL}
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-password
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-username
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-name
              - name: DB_CONNECTION_STRING
                value: "host=$(DB_HOST);port=5432;database=$(POSTGRESQL_DATABASE);username=$(POSTGRESQL_USER);password=$(POSTGRESQL_PASSWORD)"
            ports:
              - containerPort: 1025
                protocol: TCP
              - containerPort: 5001
                protocol: TCP
              - containerPort: 8080
                protocol: TCP
            startupProbe:
              httpGet:
                path: /api/healthcheck/startup
                port: 8080
                scheme: HTTP
              timeoutSeconds: 60
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 120
            readinessProbe:
              httpGet:
                path: /api/healthcheck/readiness
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 5
              successThreshold: 1
              failureThreshold: 3
            livenessProbe:
              httpGet:
                path: /api/healthcheck/liveness
                port: 8080
                scheme: HTTP
              timeoutSeconds: 1
              periodSeconds: 5
              successThreshold: 1
              failureThreshold: 3
            imagePullPolicy: IfNotPresent
            terminationMessagePolicy: File
            envFrom:
              - configMapRef:
                  name: canada-post-addresscomplete
              - configMapRef:
                  name: ches
              - configMapRef:
                  name: dotnet-webapi-backend
              - configMapRef:
                  name: keycloak
              - configMapRef:
                  name: ldap
              - configMapRef:
                  name: mail-settings
              - configMapRef:
                  name: metabase-embedded
              - configMapRef:
                  name: pharmanet-api
              - configMapRef:
                  name: verifiable-credential
              - secretRef:
                  name: canada-post-addresscomplete-secrets
              - secretRef:
                  name: ches-secrets
              - secretRef:
                  name: document-manager-secrets
              - secretRef:
                  name: keycloak-secrets
              - secretRef:
                  name: metabase-embedded-secrets
              - secretRef:
                  name: pharmanet-api-secrets
              - secretRef:
                  name: verifiable-credential-secrets
              - secretRef:
                  name: plr-integration-thumbprint
            volumeMounts:
              - name: cert-volume
                mountPath: /opt/app-root/etc/certs
                readOnly: true
        volumes:
          - name: cert-volume
            secret:
              secretName: pharmanet-api-ssl-certs
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-webapi
            - run-migrations
          from:
            kind: ImageStreamTag
            namespace: "${OC_LICENSE_PLATE}-tools"
            name: 'prime-webapi-backend:${IMAGE_TAG}'

#   Backend Web API Service
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SVC_NAME}-webapi
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: ${SVC_NAME}-webapi
        port: 8080
        targetPort: 8080
    selector:
      name: ${SVC_NAME}-webapi

###########################################
###      Document Manager (backend)     ###
###########################################
#   Document Manager (backend) Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${SVC_NAME}-document-manager
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: python
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-document-manager
    strategy:
      type: Recreate
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 120
        maxSurge: "50%"
        maxUnavailable: 0
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-document-manager
      spec:
        initContainers:
        - name: run-migrations
          image: >-
            image-registry.openshift-image-registry.svc:5000/${OC_LICENSE_PLATE}-tools/prime-document-manager:${IMAGE_TAG}
          command:
            # Script force waits migration pod execution until PostgreSQL is verified to
            # be open to query connections.
            - /opt/app-root/src/app.sh
          args:
            - migrate
          env:
            - name: CACHE_REDIS_HOST
              value: ${SVC_NAME}-redis
            - name: CACHE_REDIS_PASS
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: database-password
            - name: CACHE_REDIS_PORT
              value: "6379"
            - name: PGHOST
              valueFrom:
                  configMapKeyRef:
                    name: database-cm
                    key: database-host
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: ${SVC_NAME}-patroni-secret
                  key: app-db-name
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SVC_NAME}-patroni-secret
                  key: app-db-password
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: ${SVC_NAME}-patroni-secret
                  key: app-db-username
            - name: DOCUMENT_MANAGER_URL
              value: "https://${VANITY_URL}/api/docman/"
            - name: JWT_OIDC_WELL_KNOWN_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: keycloak
                  key: JWT_WELL_KNOWN_CONFIG
            - name: SQLALCHEMY_DATABASE_URI
              value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDATABASE)"
          envFrom:
            - configMapRef:
                name: document-manager
        containers:
          - name: ${SVC_NAME}-document-manager
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_LICENSE_PLATE}-tools/prime-document-manager:${IMAGE_TAG}
            resources:
              limits:
                cpu: 80m
                memory: 200Mi
              requests:
                cpu: 10m
                memory: 28Mi
            env:
              - name: CACHE_REDIS_HOST
                value: ${SVC_NAME}-redis
              - name: CACHE_REDIS_PASS
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
              - name: CACHE_REDIS_PORT
                value: "6379"
              - name: PGHOST
                valueFrom:
                  configMapKeyRef:
                    name: database-cm
                    key: database-host
              - name: PGDATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-name
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-password
              - name: PGUSER
                valueFrom:
                  secretKeyRef:
                    name: ${SVC_NAME}-patroni-secret
                    key: app-db-username
              - name: DOCUMENT_MANAGER_URL
                value: "https://${VANITY_URL}/api/docman/"
              - name: JWT_OIDC_WELL_KNOWN_CONFIG
                valueFrom:
                  configMapKeyRef:
                    name: keycloak
                    key: JWT_WELL_KNOWN_CONFIG
              - name: SQLALCHEMY_DATABASE_URI
                value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDATABASE)"
            envFrom:
              - configMapRef:
                  name: document-manager
            volumeMounts:
            # Mount Document Manager to PVC
              - mountPath: /app/
                name: ${SVC_NAME}-document-manager-pvc
            ports:
              - containerPort: 6001
                protocol: TCP
              - containerPort: 9191
                protocol: TCP
            startupProbe:
              httpGet:
                path: /healthcheck
                port: 6001
                scheme: HTTP
              timeoutSeconds: 1
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 120
            readinessProbe:
              httpGet:
                path: /healthcheck
                port: 6001
                scheme: HTTP
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 5
              successThreshold: 1
              failureThreshold: 3
        volumes:
          - name: ${SVC_NAME}-document-manager-pvc
            persistentVolumeClaim:
              claimName: '${SVC_NAME}-document-manager-pvc'
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${SVC_NAME}-document-manager
            - run-migrations
          from:
            kind: ImageStreamTag
            namespace: "${OC_LICENSE_PLATE}-tools"
            name: 'prime-document-manager:${IMAGE_TAG}'

#   Document Manager (backend) Service
- apiVersion: v1
  kind: Service
  metadata:
    name: ${SVC_NAME}-document-manager
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: ${SVC_NAME}-document-manager
        port: 6001
        targetPort: 6001
    selector:
      name: ${SVC_NAME}-document-manager
#   Document Manager (backend) Persistent Volume Claim
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${SVC_NAME}-document-manager-pvc
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${DOCMAN_VOLUME_CAPACITY}

###########################################
###                Redis                ###
###########################################
#   Redis Deployment Config
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: ${SVC_NAME}-redis
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
      app.openshift.io/runtime: redis
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      name: ${SVC_NAME}-redis
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 120
        maxSurge: "20%"
        maxUnavailable: "10%"
      activeDeadlineSeconds: 21600
    template:
      metadata:
        labels:
          dev-app: ${SVC_NAME}
          name: ${SVC_NAME}-redis
      spec:
        volumes:
          - name: ${SVC_NAME}-redis-data
            emptyDir: {}
        containers:
          - name: redis
            image: >-
              image-registry.openshift-image-registry.svc:5000/${OC_LICENSE_PLATE}-tools/redis-6:latest
            resources:
              limits:
                cpu: 25m
                memory: 512Mi
              requests:
                cpu: 5m
                memory: 50Mi 
            env:
              - name: REDIS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: redis
                    key: database-password
              - name: REDIS_PORT
                value: "6379"
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" ==
                    "PONG"
              initialDelaySeconds: 5
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            livenessProbe:
              tcpSocket:
                port: 6379
              initialDelaySeconds: 30
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            securityContext:
              capabilities: {}
              privileged: false
            ports:
              - containerPort: 6379
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - name: ${SVC_NAME}-redis-data
                mountPath: /var/lib/redis/data
            terminationMessagePolicy: File
        restartPolicy: Always
        dnsPolicy: ClusterFirst

#   Redis Service
- kind: Service
  apiVersion: v1
  metadata:
    name: ${SVC_NAME}-redis
    namespace: ${OC_LICENSE_PLATE}-${OC_ENV}
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    ports:
      - name: redis
        protocol: TCP
        port: 6379
        targetPort: 6379
    selector:
      name: ${SVC_NAME}-redis

###########################################
###              Cron Jobs              ###
###########################################
#   Template for job that activates api to update email statuses
- apiVersion: batch/v1
  kind: CronJob
  metadata:
    name: ${SVC_NAME}-update-email-statuses
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    concurrencyPolicy: Forbid
    jobTemplate:
      spec:
        template:
          spec:
            containers:
              - name: ${SVC_NAME}-update-email-statuses
                image: >-
                  public.ecr.aws/h0h9t7p1/alpine-bash-curl-jq:latest
                command:
                - bash
                - '-c'
                - >-
                  echo -e "-------- STARTING CRON --------\n"

                  echo -e "-------- Getting access_token --------\n"

                  TOKEN=$(curl -X POST
                  "${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token"
                  \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "grant_type=client_credentials" \
                    -d "client_id=${KEYCLOAK_CLIENT_ID}" \
                    -d "client_secret=${KEYCLOAK_CLIENT_SECRET}" | jq -r '.access_token' )

                  echo -e ${TOKEN}

                  echo -e "-------- Calling PRIME API --------\n"

                  curl -v -X POST
                  http://${SVC_NAME}-webapi:8080/api/Emails/management/statuses
                  \
                    -H "Authorization: Bearer ${TOKEN}" \
                    -H "Content-Length: 0"

                  echo -e "-------- CRON COMPLETE --------\n"
                env:
                  - name: KEYCLOAK_CLIENT_SECRET
                    valueFrom:
                      secretKeyRef:
                        key: prime_service_account_client_secret
                        name: prime-service-account
                  - name: KEYCLOAK_CLIENT_ID
                    valueFrom:
                      secretKeyRef:
                        key: prime_service_account_client_id
                        name: prime-service-account
                  - name: KEYCLOAK_URL
                    valueFrom:
                      secretKeyRef:
                        key: KEYCLOAK_URL
                        name: keycloak
                  - name: KEYCLOAK_REALM
                    valueFrom:
                      secretKeyRef:
                        key: KEYCLOAK_REALM
                        name: keycloak
                resources:
                  limits:
                    cpu: 500m
                    memory: 2Gi
                  requests:
                    cpu: 100m
                    memory: 512Mi
            restartPolicy: Never
    schedule: '${CRON_SCHEDULE_STATUSES}'

#   Template for job that activates api to send renewal emails 
- apiVersion: batch/v1
  kind: CronJob
  metadata:
    name: ${SVC_NAME}-send-renewal-emails
    labels:
      app.kubernetes.io/part-of: ${SVC_NAME}
  spec:
    concurrencyPolicy: Forbid
    jobTemplate:
      spec:
        template:
          spec:
            containers:
              - name: ${SVC_NAME}-send-renewal-emails
                image: >-
                  public.ecr.aws/h0h9t7p1/alpine-bash-curl-jq:latest
                command:
                - bash
                - '-c'
                - >-
                  echo -e "-------- STARTING CRON --------\n"

                  echo -e "-------- Getting access_token --------\n"

                  TOKEN=$(curl -X POST
                  "${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token"
                  \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -d "grant_type=client_credentials" \
                    -d "client_id=${KEYCLOAK_CLIENT_ID}" \
                    -d "client_secret=${KEYCLOAK_CLIENT_SECRET}" | jq -r '.access_token' )

                  echo -e ${TOKEN}

                  echo -e "-------- Calling PRIME API --------\n"

                  curl -v -X POST
                  http://${SVC_NAME}-webapi:8080/api/Emails/management/enrollees/renewal
                  \
                    -H "Authorization: Bearer ${TOKEN}" \
                    -H "Content-Length: 0"

                  echo -e "-------- CRON COMPLETE --------\n"
                env:
                  - name: KEYCLOAK_CLIENT_SECRET
                    valueFrom:
                      secretKeyRef:
                        key: prime_service_account_client_secret
                        name: prime-service-account
                  - name: KEYCLOAK_CLIENT_ID
                    valueFrom:
                      secretKeyRef:
                        key: prime_service_account_client_id
                        name: prime-service-account
                  - name: KEYCLOAK_URL
                    valueFrom:
                      secretKeyRef:
                        key: KEYCLOAK_URL
                        name: keycloak
                  - name: KEYCLOAK_REALM
                    valueFrom:
                      secretKeyRef:
                        key: KEYCLOAK_REALM
                        name: keycloak
                resources:
                  limits:
                    cpu: 500m
                    memory: 2Gi
                  requests:
                    cpu: 100m
                    memory: 512Mi
            restartPolicy: Never
    schedule: '${CRON_SCHEDULE_RENEWALS}'
