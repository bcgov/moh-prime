apiVersion: v1
kind: Template
labels:
  template: postgresql-ephemeral-template
metadata:
  name: postgresql-dc
  creationTimestamp: null
  description: >-
    Ephemeral deployment configuration template for PRIME's PostgreSQL database
    server.

    NOTE: This configuration template does not contain a persistent volume 
    claim, and is only for PRs to develop. For all other deployments to 
    develop, test, and master branches, please refer to `postgresql.dc.yaml`
parameters:
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: NAME
    required: true
  - name: VERSION
    required: true
  - name: SOURCE_CONTEXT_DIR
    required: true
  - name: SOURCE_REPOSITORY_URL
    required: true
  - name: SOURCE_REPOSITORY_REF
    required: true
  - name: SUFFIX
    required: false
  - name: OC_NAMESPACE
    required: true
  - name: OC_APP
    required: true
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: The OpenShift ImageStream name.
    displayName: IMAGE_STREAM_NAME
    name: IMAGE_STREAM_NAME
    value: postgresql-10
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: IMAGE_STREAM_NAMESPACE
    value: '9c33a9-tools'
  - description: 'Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).'
    displayName: Version of PostgreSQL Image
    name: IMAGE_STREAM_VERSION
    required: true
    value: 'latest'
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: postgresql
  - description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 5Gi
  - name: CPU_LIMIT
    value: 500m
  - name: MEMORY_LIMIT
    value: 2Gi
  - name: CPU_REQUEST
    value: 200m
  - name: MEMORY_REQUEST
    value: 1.5Gi
  - name: STORAGE_CLASS
    value: netapp-block-standard
    required: true
  - name: STORAGE_MODE
    value: ReadWriteOnce
    required: true
objects:
  # PostgreSQL service (endpoint for internal routing to related pods)
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: >-
          postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      name: '${NAME}${SUFFIX}'
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        name: '${NAME}${SUFFIX}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${NAME}${SUFFIX}'
      creationTimestamp: null
      labels:
        shared: 'true'
      annotations: {}
    spec:
      lookupPolicy:
        local: false
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: ${STORAGE_CLASS}
      name: '${NAME}${SUFFIX}'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: dev-app
                operator: In
                values:
                - database
            topologyKey: "kubernetes.io/hostname"
      replicas: 1
      selector:
        name: '${NAME}${SUFFIX}'
      strategy:
        type: Recreate
        maxSurge: 50%
        maxUnavailable: 0
      template:
        metadata:
          labels:
            dev-app: database
            name: '${NAME}${SUFFIX}'
        spec:
          containers:
            - capabilities: {}
              env:
                - name: DB_HOST
                  value: '${NAME}${SUFFIX}'

                # PostgreSQL environment variables
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgresql_database_admin_password
                      name: "postgresql-secrets"
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: postgresql_database_username
                      name: "postgresql-secrets"
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgresql_database_password
                      name: "postgresql-secrets"
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgresql_database_admin_password
                      name: "postgresql-secrets"
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      key: postgresql_database_name
                      name: "postgresql"
              image: ' '
              imagePullPolicy: IfNotPresent
              lifecycle:
                preStop:
                  exec:
                    command: ['pg_ctl', 'stop']
              livenessProbe:
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      psql -h 127.0.0.1 -d postgres -U
                      $POSTGRESQL_USER -c 'SELECT 1'
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources: {}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: '${NAME}${SUFFIX}-data'
                - mountPath: /var/run/postgresql
                  name: '${NAME}${SUFFIX}-run'
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: '${NAME}${SUFFIX}-data'
              emptyDir: {}
            - name: '${NAME}${SUFFIX}-run'
              emptyDir: {}
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: 'postgresql-10:latest'
              namespace: 9c33a9-tools
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange
    status: {}
