# Nginx configuration mainly for testing PRIME-1408:
#
# Sets up Nginx reverse proxy that passes HTTPS traffic to
# where development dotnet-webapi is typically running

worker_processes auto;

events {
    worker_connections  1024;
}

http {

    # For more info:  http://nginx.org/en/docs/debugging_log.html
    error_log C:/Programs/nginx-1.18.0/logs/error.log warn;

    # Simple reverse-proxy for HTTP traffic
    #
    # server {
    #     listen       8088;

    #     location / {
    #     proxy_pass      http://127.0.0.1:5000;
    #     }
    # }

    server {
       listen       443 ssl;
       server_name  localhost;

       ssl_certificate      server.crt;
       ssl_certificate_key  server.key;

       # Important, for more info, see https://clairekeum.wordpress.com/2018/12/05/passing-client-cert-through-nginx-to-the-backend/
       # and http://nginx.org/en/docs/http/ngx_http_ssl_module.html
       ssl_verify_client    optional_no_ca;

       ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

       ssl_ciphers  HIGH:!aNULL:!MD5;
       ssl_prefer_server_ciphers  on;

       location / {
           # Passes HTTPS traffic to where development dotnet-webapi is typically running
           proxy_pass                    https://127.0.0.1:5001;
           # For more info, see https://serverfault.com/questions/622855/nginx-proxy-to-back-end-with-ssl-client-certificate-authentication
           # and http://nginx.org/en/docs/http/ngx_http_ssl_module.html
           proxy_set_header              X-SSL-CERT $ssl_client_escaped_cert;
           # For more info, see https://serverfault.com/questions/341023/nginx-as-reverse-proxy-with-upstream-ssl
           # and https://docs.nginx.com/nginx/admin-guide/security-controls/securing-http-traffic-upstream/
           proxy_ssl_trusted_certificate backend-api.pem;
           proxy_ssl_verify              off;
       }
    }
}

