/* Jenkinsfile.promotion
 *
 * After merging the test branch into the master branch, this will work to 
 * build and deploy changes to the OpenShift production environment.
 * 
 * This is achieved via the following stages:
 *   1. Approval is provided by user in Jenkins console log.
 *   2. Promotion of Master
 *   3. Build & deploy to Demo environment
 *   4. Build & deploy to Production environment
 *
 */

pipeline {
    agent none
    stages {
        stage('Approve Promotion of Master to Demo & Production Environment') {
            options {
                timeout(time: 6, unit: 'DAYS')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            steps {
                script {
                    def IS_APPROVED = input(
                        id: 'IS_APPROVED', message: "Do you wish to approve a deploy to the Demo & Production environments?", ok: "Yes", parameters: [
                            string(name: 'IS_APPROVED', defaultValue: 'Yes', description: 'Deploy to Demo & Production?')
                            ])
                    if (IS_APPROVED != 'yes') {
                        currentBuild.result = "SUCCESS"
                        echo "User cancelled deployment"
                    }

                    // Generate release prior to deploy to production, and request release tag name and description from user
                    def releaseTag = input(
                            id: 'Release Version Tag', message: "Please provide this release's version tag.", ok: "Submit", parameters: [
                            string(name: 'IS_APPROVED', defaultValue: 'v', description: 'A version number that will tag and easily identify this release.')
                        ])
                    def releaseTitle = input(
                            id: 'Release Title', message: "Please provide an appropriate title for this release.", ok: "Submit", parameters: [
                            string(name: 'Release Title', defaultValue: 'Yes', description: 'A title that summarizes the new features and modifications that are contained in this release.')
                        ])
                    def isPrerelease = false
                    def isDraft = true
                    
                    withCredentials([usernameColonPassword(credentialsId: 'jenkins-github-credentials', variable: 'GITHUB_CREDENTIAL')]) {
                        sh "./player.sh createRelease $GITHUB_CREDENTIAL ${releaseTag} ${releaseTitle} ${releaseBody} ${isPrerelease} ${isDraft}"
                    }
                    
                    sh "./player.sh createRelease ${releaseTag} ${releaseTitle} ${releaseBody} ${isPrerelease}"
                }
            }
        }
        stage('Promote Master to Demo & Production Environment') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            parallel {
                stage('Build & Deploy Master to Demo') {
                    agent { label 'master' }
                    environment {
                            VANITY_URL="demo.pharmanetenrolment.gov.bc.ca"
                            SCHEMA="https"
                            PORT="8443"
                            FRONTEND_ARGS="-p REDIRECT_URL=${SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
                            API_ARGS="-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${VANITY_URL}"
                            SUFFIX="-demo"
                    }
                    steps {
                        script {
                            echo "Building (MASTER) for Demo ..."
                            sh "./player.sh build api test ${API_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh build frontend test ${FRONTEND_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh build document-manager test -p SUFFIX='-demo'"

                            echo "Deploying (MASTER) to Demo ..."
                            sh "./player.sh deploy postgres test -p SUFFIX='-demo'"
                            sh "./player.sh deploy redis test -p SUFFIX='-demo'"
                            // sh "./player.sh deploy mongo test -p SUFFIX='-demo'"
                            sh "./player.sh deploy api test ${API_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh deploy frontend test ${FRONTEND_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh deploy document-manager test -p SUFFIX='-demo' -p VOLUME_CAPACITY=1Gi"
                        }
                    }
                }
                stage('Build & Deploy Master to Production') {
                    agent { label 'master' }
                    steps {
                        script {
                            echo "Building (MASTER) branch for Production..."
                            sh "./player.sh build api prod"
                            sh "./player.sh build frontend prod"
                            sh "./player.sh build document-manager prod"

                            echo "Deploying (MASTER) branch to Production..."
                            sh "./player.sh deploy postgres prod"
                            sh "./player.sh deploy redis prod"
                            sh "./player.sh deploy api prod"
                            sh "./player.sh deploy frontend prod"
                            sh "./player.sh deploy document-manager prod"
                            sh "./player.sh toolbelt schemaspy prod"
                        }
                    }
                }
            }
        }
    }
}