/* Jenkinsfile.production
 *
 * After merging the test branch into the master branch, this will work to
 * build and deploy changes to the OpenShift production environment. This
 * will also include a deploy to our Demo site.
 *
 * Hotfix builds and deploys, although associated as fixes to our master
 * branch, will be done to the OpenShift test environment.
 *
 * Deployments to master are automatically performed when merges from any
 * external branches are performed. By team rules and standards, only
 * the test and hotfix branches are allowed to have this privilege.
 *
 * Procedure:
 *  1. If dealing with a hotfix branch, build and deploy to the test environment.
 *  2. Promotion and simultaneous build and deployment of Master
 *      a. Build & deploy to Demo environment
 *      b. Build & deploy to Production environment
 *
 */

pipeline {
    agent none
    stages {
        stage('Build & Deploy Hotfix (PR)') {
            options {
                timeout(time: 60, unit: 'MINUTES')   // timeout on this stage
            }
            // Build/deploy if branch is for a PR to master
            when { expression { (BRANCH_NAME ==~ /PR-\d+/) }; }
            environment {
                    branchLower = BRANCH_NAME.toLowerCase()
                    vanityUrl = "${branchLower}.pharmanetenrolment.gov.bc.ca"
                    schema = "https"
                    port = "8443"
                    frontendArgs = "-p REDIRECT_URL=${schema}://${vanityUrl} -p VANITY_URL=${vanityUrl}"
                    apiArgs = "-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${vanityUrl}"
                    suffix = "-${branchLower}"
            }
            agent { label 'master' }
            steps {
                script {
                    echo "Building Release PR..."
                    sh "./player.sh build api test ${apiArgs} -p SUFFIX=${suffix}"
                    sh "./player.sh build frontend test ${frontendArgs} -p SUFFIX=${suffix}"
                    sh "./player.sh build document-manager test -p SUFFIX=${suffix}"

                    echo "Deploying Release PR..."
                    sh "./player.sh deploy postgres test -p SUFFIX=${suffix}"
                    sh "./player.sh deploy redis test -p SUFFIX=${suffix}"
                    // sh "./player.sh deploy mongo test -p SUFFIX=${suffix}"
                    sh "./player.sh deploy api test ${apiArgs} -p SUFFIX=${suffix}"
                    sh "./player.sh deploy frontend test ${frontendArgs} -p SUFFIX=${suffix}"
                    sh "./player.sh deploy document-manager test -p SUFFIX=${suffix} -p VOLUME_CAPACITY=1Gi -p VANITY_URL=${vanityUrl}"
                }
            }
        }
        stage('Build & Deploy to Demo and Production Environment (MASTER)') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            // Build and deploy master simultaneously to both Demo and Production
            when { expression { ( BRANCH_NAME == 'master' ) } }
            parallel {
                stage('Build & Deploy Master to Demo') {
                    agent { label 'master' }
                    environment {
                            vanityUrl = "demo.pharmanetenrolment.gov.bc.ca"
                            schema = "https"
                            port = "8443"
                            frontendArgs = "-p REDIRECT_URL=${schema}://${vanityUrl} -p VANITY_URL=${vanityUrl}"
                            apiArgs = "-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${vanityUrl}"
                            suffix = "-demo"
                    }
                    steps {
                        script {
                            echo "Building (MASTER) for Demo ..."
                            sh "./player.sh build api test ${apiArgs} -p SUFFIX=${suffix}"
                            sh "./player.sh build frontend test ${frontendArgs} -p SUFFIX=${suffix}"
                            sh "./player.sh build document-manager test -p SUFFIX=${suffix}"

                            echo "Deploying (MASTER) to Demo ..."
                            sh "./player.sh deploy postgres test -p SUFFIX=${suffix}"
                            sh "./player.sh deploy redis test -p SUFFIX=${suffix}"
                            // sh "./player.sh deploy mongo test -p SUFFIX=${suffix}"
                            sh "./player.sh deploy api test ${apiArgs} -p SUFFIX=${suffix}"
                            sh "./player.sh deploy frontend test ${frontendArgs} -p SUFFIX=${suffix}"
                            sh "./player.sh deploy document-manager test -p SUFFIX=${suffix} -p VOLUME_CAPACITY=1Gi -p VANITY_URL=${vanityUrl}"
                        }
                    }
                }
                stage('Build & Deploy Master to Production') {
                    agent { label 'master' }
                    steps {
                        script {
                            echo "Building (MASTER) branch for Production..."
                            sh "./player.sh build api prod"
                            sh "./player.sh build frontend prod"
                            sh "./player.sh build document-manager prod"

                            echo "Deploying (MASTER) branch to Production..."
                            sh "./player.sh deploy postgres prod"
                            sh "./player.sh deploy redis prod"
                            sh "./player.sh deploy api prod"
                            sh "./player.sh deploy frontend prod"
                            sh "./player.sh deploy document-manager prod"
                            sh "./player.sh toolbelt schemaspy prod"
                        }
                    }
                }
            }
        }
    }
}
