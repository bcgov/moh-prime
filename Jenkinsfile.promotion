/* Jenkinsfile.promotion
 *
 * After merging the develop branch into the master branch, this will work to 
 * build and deploy changes to the OpenShift test & production environment.
 * 
 * This is achieved via the following stages:
 *   1. Promotion of master to Test environment
 *      a. Build Test environment from Master
 *      b. Deploy Test environment from Master   
 *   2. Perform code quality check on Test environment
 *      a. SonarQube scan
 *      b. OWASP ZAP scan 
 *   3. Approval for deployment of Master to production is provided by user in
 *      the Jenkins console log.
 *   4. Promotion and simultaneous build and deployment of Master
 *      a. Build & deploy to Demo environment
 *      b. Build & deploy to Production environment
 *
 */

pipeline {
    agent none
    stages {
        stage('Promote Master to Test') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            environment {
                    BRANCH_LOWER = BRANCH_NAME.toLowerCase()
                    VANITY_URL = "test.pharmanetenrolment.gov.bc.ca"
                    SCHEMA = "https"
                    PORT = "8443"
                    FRONTEND_ARGS = "-p REDIRECT_URL=${SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
                    API_ARGS = "-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${VANITY_URL}"
                    SUFFIX= "-test"
            }
            agent { label 'master' }
            steps {
                script {
                    echo "Test (MASTER) ..."
                    sh "./player.sh sparsify"
                    sh "./player.sh build api test ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build frontend test ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh build document-manager test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy postgres test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy redis test -p SUFFIX=${SUFFIX}"
                    // sh "./player.sh deploy mongo test -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy api test ${API_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy frontend test ${FRONTEND_ARGS} -p SUFFIX=${SUFFIX}"
                    sh "./player.sh deploy document-manager test -p SUFFIX=${SUFFIX} -p VOLUME_CAPACITY=1Gi -p VANITY_URL=${VANITY_URL}"
                    sh "./player.sh toolbelt schemaspy test"
                }
            }
        }
        stage('Quality Check') {
            options {
                timeout(time: 30, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            parallel {
                stage('SonarQube Code Check') {
                    agent { label 'code-tests' }
                    steps {
                        sh "./player.sh scan"
                    }      
                }
                stage('ZAP') {
                    agent { label 'code-tests' }
                    steps {
                        checkout scm
                        echo "Scanning..."
                        sh "./player.sh zap frontend"
                    }
                }
            }
        }
        stage('Approve Promotion of Demo & Production') {
            options {
                timeout(time: 6, unit: 'DAYS')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            steps {
                script {
                    def IS_APPROVED = input(
                        id: 'IS_APPROVED', message: "Deploy to Demo & Production?", ok: "Yes", parameters: [
                            string(name: 'IS_APPROVED', defaultValue: 'Yes', description: 'Deploy to Demo & Production?')
                            ])
                    if (IS_APPROVED != 'yes') {
                        currentBuild.result = "SUCCESS"
                        echo "User cancelled deployment"
                    }
                }
            }
        }
        stage('Promote to Demo & Production') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            parallel {
                stage('Promote Master to Demo') {
                    agent { label 'master' }
                    environment {
                            VANITY_URL="demo.pharmanetenrolment.gov.bc.ca"
                            SCHEMA="https"
                            PORT="8443"
                            FRONTEND_ARGS="-p REDIRECT_URL=${SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
                            API_ARGS="-p ASPNETCORE_ENVIRONMENT=Release -p VANITY_URL=${VANITY_URL}"
                            SUFFIX="-demo"
                    }
                    steps {
                        script {
                            echo "Demo (MASTER) ..."
                            sh "./player.sh sparsify"
                            sh "./player.sh build api test ${API_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh build frontend test ${FRONTEND_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh build document-manager test -p SUFFIX='-demo'"
                            sh "./player.sh deploy postgres test -p SUFFIX='-demo'"
                            sh "./player.sh deploy redis test -p SUFFIX='-demo'"
                            // sh "./player.sh deploy mongo test -p SUFFIX='-demo'"
                            sh "./player.sh deploy api test ${API_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh deploy frontend test ${FRONTEND_ARGS} -p SUFFIX='-demo'"
                            sh "./player.sh deploy document-manager test -p SUFFIX='-demo' -p VOLUME_CAPACITY=1Gi -p VANITY_URL=${VANITY_URL}"                            
                        }
                    }
                }
                stage('Promote Master to Production') {
                    agent { label 'master' }
                    steps {
                        script {
                            echo "Deploy to Production..."
                            sh "./player.sh sparsify"
                            sh "./player.sh build api prod"
                            sh "./player.sh build frontend prod"
                            sh "./player.sh build document-manager prod"
                            sh "./player.sh deploy postgres prod"
                            sh "./player.sh deploy redis prod"
                            sh "./player.sh deploy api prod"
                            sh "./player.sh deploy frontend prod"
                            sh "./player.sh deploy document-manager prod"
                            sh "./player.sh toolbelt schemaspy prod"
                        }
                    }
                }
            }
        }
    }
}
