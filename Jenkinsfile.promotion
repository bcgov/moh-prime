pipeline {
    agent none
    environment {
        BRANCH_LOWER=BRANCH_NAME.toLowerCase()
        VANITY_URL="test.pharmanetenrolment.gov.bc.ca"
        HTTP_SCHEMA="https"
        HTTP_PORT="8443"
        FRONTEND_ARGS="-p HTTP_PORT=${HTTP_PORT} -p HTTP_SCHEMA=${HTTP_SCHEMA} -p REDIRECT_URL=${HTTP_SCHEMA}://${VANITY_URL} -p VANITY_URL=${VANITY_URL}"
        API_ARGS="-p ASPNETCORE_ENVIRONMENT=Development -p HTTP_PORT=${HTTP_PORT} -p HTTP_SCHEMA=${HTTP_SCHEMA} -p VANITY_URL=${VANITY_URL}"
    }
    stages {
        stage('Promote Master to Test') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( GIT_BRANCH == 'master' ) } }
            agent { label 'master' }
            steps {
                    echo "Test (MASTER) ..."
                    sh "./player.sh build database test"
                    sh "./player.sh build api test ${API_ARGS}"
                    sh "./player.sh build frontend test ${FRONTEND_ARGS}"
                    sh "./player.sh deploy database test"
                    sh "./player.sh deploy api test ${API_ARGS}"
                    sh "./player.sh deploy frontend test ${FRONTEND_ARGS}"
                    sh "./player.sh toolbelt schemaspy test"
            }
        }
        stage('SonarQube Code Check') {
            options {
                timeout(time: 90, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( GIT_BRANCH != 'master' ) } }
            agent { label 'code-tests' }
            steps {
                sh "./player.sh scan"
            }
        }
        stage('ZAP') {
            options {
                timeout(time: 90, unit: 'MINUTES')   // timeout on this stage
            }
            agent { label 'code-tests' }
            steps {
                checkout scm
                echo "Scanning..."
                sh "./player.sh zap frontend"
                sh "./player.sh zap api"
            }
        }
        stage('Approve Promotion of Master') {
            options {
                timeout(time: 24, unit: 'HOURS')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            steps {
                script {
                    def IS_APPROVED = input(
                        id: 'IS_APPROVED', message: "Deploy to Production?", ok: "yes", parameters: [
                            string(name: 'IS_APPROVED', defaultValue: 'yes', description: 'Deploy to Production?')
                            ])
                    if (IS_APPROVED != 'yes') {
                        currentBuild.result = "SUCCESS"
                        echo "User cancelled deployment"
                    }
                }
            }
        }
        stage('Promote Master to Production') {
            options {
                timeout(time: 120, unit: 'MINUTES')   // timeout on this stage
            }
            when { expression { ( BRANCH_NAME == 'master' ) } }
            agent { label 'master' }
            steps {
                echo "Deploy to Production..."
                sh "./player.sh build database prod"
                sh "./player.sh build api prod"
                sh "./player.sh build frontend prod"
                sh "./player.sh deploy database prod"
                sh "./player.sh deploy api prod"
                sh "./player.sh deploy frontend prod"
                sh "./player.sh toolbelt schemaspy prod"
            }
        }
    }
}
