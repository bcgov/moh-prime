kind: Template
apiVersion: v1
labels:
  template: database-backup-template
metadata:
  name: document-manager-bc
  creationTimestamp: null
parameters:
  - name: NAME
    displayName: Name
    description: A prefix appended to all objects
    required: true
    value: document-manager
  - name: SUFFIX
    displayName: Name Suffix
    description: A suffix appended to all objects
    required: false
  - name: VERSION
    required: false
  - name: SOURCE_CONTEXT_DIR
    value: document-manager
    required: true
  - name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/bcgov/moh-prime
  - name: SOURCE_REPOSITORY_REF
    required: true
  - name: OC_NAMESPACE
    required: true
    value: dqszvc
  - name: OC_APP
    required: true
    value: dev
  - name: FLASK_ENV
    value: "production"
    required: true
  - name: STORAGE_CLASS
    value: netapp-block-standard
    required: true
  - name: STORAGE_MODE
    value: ReadWriteOnce
    required: true
  - description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 5Gi
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: ${NAME}${SUFFIX}-backend-pvc
    name: ${NAME}${SUFFIX}-backend-pvc
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: ${NAME}${SUFFIX}-migrate-pvc
    name: ${NAME}${SUFFIX}-migrate-pvc
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert --provider=openshift --build=deploy-config --build-repo=https://github.com/bcgov/moh-prime.git
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    name: "${NAME}${SUFFIX}-backend"
  spec:
    ports:
    - name: "6001"
      port: 6001
      targetPort: 6001
    selector:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: kompose convert --provider=openshift --build=deploy-config --build-repo=https://github.com/bcgov/moh-prime.git
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    name: "${NAME}${SUFFIX}-backend"
  spec:
    replicas: 1
    selector:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    strategy:
      resources: {}
      type: Rolling
      rollingParams:
        pre:
          failurePolicy: Retry
          execNewPod:
            containerName: "${NAME}${SUFFIX}-backend"
            command:
            - bash
            - "-c"
            - cd /opt/app-root/src && flask db upgrade
        maxSurge: 50%
        maxUnavailable: 1
        timeoutSeconds: 1200
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: "${NAME}${SUFFIX}-backend"
      spec:
        containers:
        - env:
          - name: CACHE_REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: CACHE_REDIS_HOST
                name: redis${SUFFIX}
          - name: CACHE_REDIS_PASS
            valueFrom:
              secretKeyRef:
                key: CACHE_REDIS_PASS
                name: "redis-secret"
          - name: CACHE_REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: CACHE_REDIS_PORT
                name: document-manager-backend--env-prime
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                key: DB_HOST
                name: postgresql${SUFFIX}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: "postgresql-secret"
          - name: DB_NAME_TEST
            valueFrom:
              configMapKeyRef:
                key: DB_NAME_TEST
                name: document-manager-backend--env-prime
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: "postgresql-secret"
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                key: DB_PORT
                name: document-manager-backend--env-prime
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "postgresql-secret"
          - name: DOCUMENT_MANAGER_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: DOCUMENT_MANAGER_CLIENT_SECRET
                name: "document-manager-secret"
          - name: DOCUMENT_MANAGER_URL
            valueFrom:
              configMapKeyRef:
                key: DOCUMENT_MANAGER_URL
                name: document-manager-backend--env-prime
          - name: FLASK_APP
            valueFrom:
              configMapKeyRef:
                key: FLASK_APP
                name: document-manager-backend--env-prime
          - name: FLASK_DEBUG
            valueFrom:
              configMapKeyRef:
                key: FLASK_DEBUG
                name: document-manager-backend--env-prime
          - name: FLASK_ENV
            valueFrom:
              configMapKeyRef:
                key: FLASK_ENV
                name: document-manager-backend--env-prime
          - name: FLASK_RUN_HOST
            valueFrom:
              configMapKeyRef:
                key: FLASK_RUN_HOST
                name: document-manager-backend--env-prime
          - name: FLASK_RUN_PORT
            valueFrom:
              configMapKeyRef:
                key: FLASK_RUN_PORT
                name: document-manager-backend--env-prime
          - name: JWT_OIDC_WELL_KNOWN_CONFIG
            valueFrom:
              secretKeyRef:
                key: JWT_WELL_KNOWN_CONFIG
                name: "keycloak"
          image: " "
          name: ${NAME}${SUFFIX}-backend
          ports:
          - containerPort: 6001
          resources: {}
          volumeMounts:
          - mountPath: /app/
            name: ${NAME}${SUFFIX}-backend-pvc
        restartPolicy: Always
        volumes:
        - name: ${NAME}${SUFFIX}-backend-pvc
          persistentVolumeClaim:
            claimName: ${NAME}${SUFFIX}-backend-pvc
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - document_manager_backend
        from:
          kind: ImageStreamTag
          name: "${NAME}${SUFFIX}:latest"
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.network/primenet: "true"
      io.kompose.service: ${NAME}${SUFFIX}-migrate
    name: ${NAME}${SUFFIX}-migrate
  spec:
    containers:
    - command: 
        - flask
      args:
        - db
        - upgrade
      env:
        - name: CACHE_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: CACHE_REDIS_HOST
              name: redis${SUFFIX}
        - name: CACHE_REDIS_PASS
          valueFrom:
            secretKeyRef:
              key: CACHE_REDIS_PASS
              name: "redis-secret"
        - name: CACHE_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              key: CACHE_REDIS_PORT
              name: document-manager-backend--env-prime
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              key: DB_HOST
              name: postgresql${SUFFIX}
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              key: database-name
              name: "postgresql-secret"
        - name: DB_NAME_TEST
          valueFrom:
            configMapKeyRef:
              key: DB_NAME_TEST
              name: document-manager-backend--env-prime
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: "postgresql-secret"
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              key: DB_PORT
              name: document-manager-backend--env-prime
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: "postgresql-secret"
        - name: DOCUMENT_MANAGER_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: DOCUMENT_MANAGER_CLIENT_SECRET
              name: "document-manager-secret"
        - name: DOCUMENT_MANAGER_URL
          valueFrom:
            configMapKeyRef:
              key: DOCUMENT_MANAGER_URL
              name: document-manager-backend--env-prime
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              key: FLASK_APP
              name: document-manager-backend--env-prime
        - name: FLASK_DEBUG
          valueFrom:
            configMapKeyRef:
              key: FLASK_DEBUG
              name: document-manager-backend--env-prime
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              key: FLASK_ENV
              name: document-manager-backend--env-prime
        - name: FLASK_RUN_HOST
          valueFrom:
            configMapKeyRef:
              key: FLASK_RUN_HOST
              name: document-manager-backend--env-prime
        - name: FLASK_RUN_PORT
          valueFrom:
            configMapKeyRef:
              key: FLASK_RUN_PORT
              name: document-manager-backend--env-prime
        - name: JWT_OIDC_WELL_KNOWN_CONFIG
          valueFrom:
            secretKeyRef:
              key: JWT_WELL_KNOWN_CONFIG
              name: "keycloak"
      image: ${NAME}${SUFFIX}-migrate
      name: ${NAME}${SUFFIX}-migrate
      resources: {}
      volumeMounts:
      - mountPath: /app/
        name: ${NAME}${SUFFIX}-migrate-pvc
    restartPolicy: OnFailure
    volumes:
    - name: ${NAME}${SUFFIX}-migrate-pvc
      persistentVolumeClaim:
        claimName: ${NAME}${SUFFIX}-migrate-pvc
  status: {}
