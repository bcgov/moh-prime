kind: Template
apiVersion: v1
metadata:
  name: github-runner-dc
  annotations:
    openshift.io/display-name: gitlab-runner
parameters:
  - name: NAME
    displayName: Name
    description: A prefix appended to all objects
    required: true
    value: gitlab-runner
  - name: SOURCE_REPOSITORY_URL
    required: true
    value: 'https://github.com/bcgov/moh-prime'
  - name: SOURCE_REPOSITORY_REF
    required: true
    value: 'develop'
  - name: OC_NAMESPACE
    required: true
    value: 'dqszvc'
  - name: OC_APP
    required: true
    value: 'tools'
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: '${NAME}'
    spec:
      selector:
        name: '${NAME}'
      type: ClusterIP
      sessionAffinity: None
      ports:
      - name: "ssh"
        port: 22
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: '${NAME}'
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
    spec:
      strategy:
        type: Recreate
        maxSurge: 50%
        maxUnavailable: 0
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - gitlab-runner
            from:
              kind: ImageStreamTag
              name: 'gitlab-runner-openshift:latest'
              namespace: dqszvc-tools
            lastTriggeredImage: ''
        - type: ConfigChange
      replicas: 1
      selector:
        name: '${NAME}'
      template:
        metadata:
          labels:
            name: '${NAME}'
        spec:
          containers:
            data:
              entrypoint: |
                #!/bin/bash
                set -e

                unregister() {
                  kill %1
                  echo "Unregistering runner [${RUNNER_NAME}]..."
                  /entrypoint unregister --name ${RUNNER_NAME}
                  trap '' EXIT HUP INT QUIT PIPE TERM
                  exit $?
                }
                trap 'unregister' EXIT HUP INT QUIT PIPE TERM

                # Prepare config file used by runner
                configPath="${RUNNER_WORKING_DIR}/.gitlab-runner"
                configFilePath="${configPath}/config.toml"
                mkdir -p "${configPath}"
                cp "${RUNNER_SCRIPTS_DIR}/config.toml" "${configFilePath}"

                # Backup scripts to see if config changes have been made
                rm -rf "${RUNNER_SCRIPTS_BACKUP_DIR}"
                mkdir -p "${RUNNER_SCRIPTS_BACKUP_DIR}"
                cp -rfL "${RUNNER_SCRIPTS_DIR}"/* "${RUNNER_SCRIPTS_BACKUP_DIR}"

                echo "Registering runner [${RUNNER_NAME}]..."
                export CACHE_SHARED=true # required because --cache-cache-shared true doesn't actually work
                /entrypoint register --non-interactive \
                  --config "${configFilePath}" \
                  --name ${RUNNER_NAME} \
                  --url <%= @url -%> \
                  --clone-url <%= @url -%> \
                  --registration-token "<%= @registrationToken %>" \
                  --executor kubernetes \
                  --kubernetes-namespace <%= @facts['bol_shortname'] -%> \
                  --kubernetes-service-account <%= @svc_account_name -%> \
                  --kubernetes-cpu-request <%= @all_resources['build']['cpu']['request'] -%> \
                  --kubernetes-cpu-limit <%= @all_resources['build']['cpu']['limit'] -%> \
                  --kubernetes-memory-request <%= @all_resources['build']['memory']['request'] -%> \
                  --kubernetes-memory-limit <%= @all_resources['build']['memory']['limit'] -%> \
                  --kubernetes-service-cpu-request <%= @all_resources['service']['cpu']['request'] -%> \
                  --kubernetes-service-cpu-limit <%= @all_resources['service']['cpu']['limit'] -%> \
                  --kubernetes-service-memory-request <%= @all_resources['service']['memory']['request'] -%> \
                  --kubernetes-service-memory-limit <%= @all_resources['service']['memory']['limit'] -%> \
                  --kubernetes-helper-cpu-request <%= @all_resources['helper']['cpu']['request'] -%> \
                  --kubernetes-helper-cpu-limit <%= @all_resources['helper']['cpu']['limit'] -%> \
                  --kubernetes-helper-memory-request <%= @all_resources['helper']['memory']['request'] -%> \
                  --kubernetes-helper-memory-limit <%= @all_resources['helper']['memory']['limit'] -%> \
                  --kubernetes-pull-policy always \
                  --kubernetes-image-pull-secrets imagepull \
                  --tag-list "<%= @tag_list -%>" \
                  --locked=<%= @locked %>

                # Start the runner
                /entrypoint \
                  run \
                  --config "${configFilePath}" \
                  --user="${RUNNER_USER}" \
                  --working-directory="${RUNNER_WORKING_DIR}" &

                wait
              name: gitlab-runner
              image: ' '
              ports:
                - containerPort: 22
                - containerPort: 80
              env:
                - name: RUNNER_NAME
                  value: ${NAME}
                - name: RUNNER_USER
                  value: gitlab-runner
                - name: RUNNER_WORKING_DIR
                  value: /home/gitlab-runner
                - name: RUNNER_SCRIPTS_DIR
                  value: /scripts
                - name: RUNNER_SCRIPTS_BACKUP_DIR
                  value: /home/gitlab-runner/scripts.bak
              volumeMounts:
              - name: config
                mountPath: /.gitlab-runner
                readOnly: true
              - name: kubernetes-account
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                readOnly: true
              resources: {}
              imagePullPolicy: IfNotPresent
              capabilities: {}
          volumes:
            - configMap:
                defaultMode: 420
                name: gitlab-runner-config
              name: config
          restartPolicy: Always
          dnsPolicy: ClusterFirst

