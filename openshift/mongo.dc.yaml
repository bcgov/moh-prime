---
apiVersion: v1
kind: Template
metadata:
  name: mongodb
  annotations:
    description: "MongoDB deployment template."
    tags: "MongoDB"
  description: >-
    Main deployment configuration template for PRIME's Mongo database server.
    Currently not in use (as of 2020-08-19), but is retained due to its
    potential future use.

    NOTE: This configuration template contains a persistent volume claim, and
    is required in this version of PRIME's Mongo deployment templates. It is 
    used only used in deployments to develop, test, and master branches.
    
    For all deployments of PRs to develop, please refer to 
    `mongo-ephemeral.dc.yaml`.
parameters:
  - name: NAME
    displayName: Name
    description: A prefix appended to all objects
    required: true
    value: mongodb
  - name: SUFFIX
    displayName: Name Suffix
    description: A suffix appended to all objects
    value: ''
    required: false
  - name: VERSION
    required: true
  - name: OC_NAMESPACE
    required: true
    value: dqszvc
  - name: OC_APP
    required: true
    value: dev
  - description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi
  - name: SOURCE_CONTEXT_DIR
    required: true
  - name: SOURCE_REPOSITORY_URL
    required: true
  - name: SOURCE_REPOSITORY_REF
    required: true
objects:
  # MongoDB - Deployment configuration
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: netapp-block-standard
      name: '${NAME}${SUFFIX}'
    spec:
      replicas: 1
      selector:
        name: '${NAME}${SUFFIX}'
      strategy:
        type: Recreate
        maxSurge: 50%
        maxUnavailable: 0
      template:
        metadata:
          creationTimestamp: null
          labels:
            dev-app: database
            name: '${NAME}${SUFFIX}'
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: dev-app
                    operator: In
                    values:
                    - database
                topologyKey: "kubernetes.io/hostname"
          containers:
            - env:
                - name: MONGODB_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql-secret
                - name: MONGODB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: postgresql-secret
                - name: MONGODB_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: postgresql-secret
                - name: MONGODB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: postgresql-secret
                - name: MONGO_INITDB_ROOT_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: postgresql-secret
                - name: MONGO_INITDB_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: postgresql-secret
              image: >-
                docker-registry.default.svc:5000/openshift/mongodb@sha256:fae76f90d3f00fec19a6da648f590de7c1cee63f42915cdf04416682864ce6b9
              imagePullPolicy: IfNotPresent
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 27017
                timeoutSeconds: 1
              name: ${NAME}${SUFFIX}
              ports:
                - containerPort: 27017
                  protocol: TCP
              resources:
                limits:
                  memory: 512Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/mongodb/data/db
                  name: ${NAME}${SUFFIX}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${NAME}${SUFFIX}-data
              persistentVolumeClaim:
                claimName: ${NAME}${SUFFIX}
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}${SUFFIX}
            from:
              kind: ImageStreamTag
              name: 'mongodb:3.2'
              namespace: openshift
            lastTriggeredImage: >-
              docker-registry.default.svc:5000/openshift/mongodb@sha256:fae76f90d3f00fec19a6da648f590de7c1cee63f42915cdf04416682864ce6b9
          type: ImageChange
        - type: ConfigChange
      details:
        causes:
          - type: ConfigChange
        message: config change
      latestVersion: 1
      observedGeneration: 2
      readyReplicas: 1
      unavailableReplicas: 0
      updatedReplicas: 1
  
  # PVC for MongoDB to persist all data across deployments. This is only for 
  # deploys to develop, test, and master branches. PRs to develop do not 
  # utilize PVCs and rely on `mongo-ephemeral.dc.yaml` for their deployment 
  # strategy.
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${NAME}${SUFFIX}
      annotations:
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName": netapp-block-standard
      resources:
        requests:
          storage: '${VOLUME_CAPACITY}'
