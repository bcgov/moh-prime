---
apiVersion: v1
kind: Template
labels:
  template: document-manager-template
metadata:
  name: document-manager-dc
  creationTimestamp: null
  description: >-
    Ephemeral version of the main deployment configuration template for PRIME's
    Document Manager component.
    
    WARNING: This configuration is only used for development purposes 
    (i.e. only in PR branches to develop), as it lacks persistent volume claims
    and therefore all data is lost on pod destruction. For all other 
    environments, utilize `document-manager.dc.yaml`.

    A secondary pod, document-manager-${SUFFIX}-migrate, is also created to 
    perform database migrations when any changes to the PostgreSQL database are
    made. This occurs on every single deployment, regardless if there are 
    changes to the database or not. Upon completion, the pod destroys itself.
parameters:
  - name: NAME
    displayName: Name
    description: A prefix appended to all objects
    required: true
    value: document-manager
  - name: SUFFIX
    displayName: Name Suffix
    description: A suffix appended to all objects
    required: false
  - name: VERSION
    required: false
  - name: SOURCE_CONTEXT_DIR
    value: document-manager
    required: true
  - name: SOURCE_REPOSITORY_URL
    required: true
    value: https://github.com/bcgov/moh-prime
  - name: SOURCE_REPOSITORY_REF
    required: false
  - name: OC_NAMESPACE
    required: true
    value: dqszvc
  - name: OC_APP
    required: true
    value: dev
  - name: FLASK_ENV
    value: "production"
    required: true
  - name: STORAGE_CLASS
    value: netapp-block-standard
    required: true
  - name: STORAGE_MODE
    value: ReadWriteOnce
    required: true
  - description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 5Gi
  - name: HTTP_PORT
    value: "6001"
    required: true
  - name: VANITY_URL
    required: true
    value: "pharmanetenrolment.gov.bc.ca"
objects:
# Document Manager service (endpoint for internal routing to related pods)
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert --provider=openshift --build=deploy-config --build-repo=https://github.com/bcgov/moh-prime.git
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    name: "${NAME}${SUFFIX}-backend"
  spec:
    ports:
    - name: "6001"
      port: 6001
      targetPort: 6001
    - name: "9191"
      port: 9191
      targetPort: 9191
    selector:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
  status:
    loadBalancer: {}

# Document Manager - Deployment Configuration
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: kompose convert --provider=openshift --build=deploy-config --build-repo=https://github.com/bcgov/moh-prime.git
      kompose.version: 1.21.0 (992df58d8)
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    name: "${NAME}${SUFFIX}-backend"
  spec:
    replicas: 1
    selector:
      io.kompose.service: "${NAME}${SUFFIX}-backend"
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: "${NAME}${SUFFIX}-backend"
      spec:
        containers:
        - env:
          # Redis related environment variables
          - name: CACHE_REDIS_HOST
            value: "redis${SUFFIX}"
          - name: CACHE_REDIS_PASS
            valueFrom:
              secretKeyRef:
                key: CACHE_REDIS_PASS
                name: "redis-secrets"
          - name: CACHE_REDIS_PORT
            value: "6379"

          # PostgreSQL related environment variables
          - name: DB_HOST
            value: "postgresql${SUFFIX}"
          - name: DB_NAME
            valueFrom:
              secretKeyRef: 
                key: database-name
                name: "postgresql-secret"
          - name: DB_NAME_TEST
            valueFrom:
              secretKeyRef:
                key: database-name-test
                name: "postgresql-secret"
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: "postgresql-secret"
          - name: DB_PORT
            value: "5432"
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: "postgresql-secret"
          
          # Document Manager (incl. Flask) related environment variables
          - name: DOCUMENT_MANAGER_URL
            value: "https://${VANITY_URL}/api/docman/"
          - name: FLASK_APP
            valueFrom:
              secretKeyRef:
                key: FLASK_APP
                name: "document-manager-secrets"
          - name: FLASK_DEBUG
            valueFrom:
              secretKeyRef:
                key: FLASK_DEBUG
                name: "document-manager-secrets"
          - name: FLASK_ENV
            valueFrom:
              secretKeyRef:
                key: FLASK_ENV
                name: "document-manager-secrets"
          - name: FLASK_RUN_HOST
            valueFrom:
              secretKeyRef:
                key: FLASK_RUN_HOST
                name: "document-manager-secrets"
          - name: FLASK_RUN_PORT
            value: "6001"
          
          # JWT environment variable
          - name: JWT_OIDC_WELL_KNOWN_CONFIG
            valueFrom:
              secretKeyRef:
                key: JWT_WELL_KNOWN_CONFIG
                name: "keycloak"
          
          # PostgreSQL environment variable for database migration bash script
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: "postgresql-secret"
          image: " "
          name: document-manager-backend
          ports:
          - containerPort: 6001
          - containerPort: 9191
          resources: {}
          volumeMounts:
          # Create directory and mount Document Manager app to it
          - mountPath: /app/
            name: ${NAME}${SUFFIX}-pvc
        restartPolicy: Always
        volumes:
        - name: ${NAME}${SUFFIX}-pvc
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - document-manager-backend
        from:
          kind: ImageStreamTag
          name: "${NAME}${SUFFIX}:latest"
      type: ImageChange
  status: {}

# Document Manager - Migration Pod Deployment
#
# Used for Alembic to run database migrations against the PostgreSQL database 
# for all Document Manager related tables. This pod will run once PostgreSQL 
# is verified to be open to query connections.
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.network/primenet: "true"
      io.kompose.service: ${NAME}${SUFFIX}-migrate
    name: ${NAME}${SUFFIX}-migrate
  spec:
    restartPolicy: Never
    containers:
    - command:
        # Script force waits migration pod execution until PostgreSQL is verified to 
        # be open to query connections.
        - /opt/app-root/src/app.sh
      args: 
        - migrate
      env:
        # Redis related environment variables
        - name: CACHE_REDIS_HOST
          value: "redis${SUFFIX}"
        - name: CACHE_REDIS_PASS
          valueFrom:
            secretKeyRef:
              key: CACHE_REDIS_PASS
              name: "redis-secrets"
        - name: CACHE_REDIS_PORT
          value: "6379"
        
        # PostgreSQL related environment variables
        - name: DB_HOST
          value: postgresql${SUFFIX}
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              key: database-name
              name: "postgresql-secret"
        - name: DB_NAME_TEST
          valueFrom:
            secretKeyRef:
              key: database-name-test
              name: "postgresql-secret"
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: "postgresql-secret"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: "postgresql-secret"
        
        # Document Manager (incl. Flask) related environment variables
        - name: DOCUMENT_MANAGER_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: DOCUMENT_MANAGER_CLIENT_SECRET
              name: "document-manager-secrets"
        - name: DOCUMENT_MANAGER_URL
          value: "https://${VANITY_URL}/api/docman/"
        - name: FLASK_APP
          valueFrom:
            secretKeyRef:
              key: FLASK_APP
              name: "document-manager-secrets"
        - name: FLASK_DEBUG
          valueFrom:
            secretKeyRef:
              key: FLASK_DEBUG
              name: "document-manager-secrets"
        - name: FLASK_ENV
          valueFrom:
            secretKeyRef:
              key: FLASK_ENV
              name: "document-manager-secrets"
        - name: FLASK_RUN_HOST
          valueFrom:
            secretKeyRef:
              key: FLASK_RUN_HOST
              name: "document-manager-secrets"
        - name: FLASK_RUN_PORT
          value: "6001"
        - name: JWT_OIDC_WELL_KNOWN_CONFIG
          valueFrom:
            secretKeyRef:
              key: JWT_WELL_KNOWN_CONFIG
              name: "keycloak"
        
        # Environment variable for database migration bash script
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: "postgresql-secret"
      image: docker-registry.default.svc:5000/${OC_NAMESPACE}-${OC_APP}/${NAME}${SUFFIX}:latest
      name: ${NAME}${SUFFIX}-migrate
      resources: {}
  status: {}
