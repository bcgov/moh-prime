kind: Template
apiVersion: v1
metadata:
  name: dotnet-webapi-dc
  creationTimestamp: null
parameters:
  - name: NAME
    displayName: Name
    description: A prefix appended to all objects
    required: true
  - name: SUFFIX
    displayName: Name Suffix
    description: A suffix appended to all objects
    required: false
  - name: VERSION
    required: true
  - name: SOURCE_CONTEXT_DIR
    required: true
    value: prime-dotnet-webapi
  - name: SOURCE_REPOSITORY_URL
    required: true
    value: "https://github.com/bcgov/moh-prime"
  - name: SOURCE_REPOSITORY_REF
    required: true
  - name: OC_NAMESPACE
    required: true
  - name: OC_APP
    required: true
  - name: ASPNETCORE_ENVIRONMENT
    value: Release
  - name: VANITY_URL
    required: true
    value: "pharmanetenrolment.gov.bc.ca"
  - name: HTTP_SCHEMA
    required: true
    value: "https"
  - name: HTTP_PORT
    required: true
    value: "8443"
  - name: TERMINATION_TYPE
    required: true
    value: "passthrough"
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        kompose.cmd: >-
          kompose convert --provider=openshift --build=build-config
          --build-repo=https://github.com/bcgov/moh-prime.git
          --build-branch=develop --deployment-config
        kompose.version: 1.18.0 (06a2e56)
      creationTimestamp: null
      labels:
        io.kompose.service: "${NAME}${SUFFIX}"
      name: "${NAME}${SUFFIX}"
    spec:
      completionDeadlineSeconds: 1200
      replicas: 1
      selector:
        io.kompose.service: "${NAME}${SUFFIX}"
      strategy: null
      resources:
        requests:
          cpu: 300m
          memory: 512Mi
        limits:
          cpu: "1"
          memory: 1024Mi
      template:
        metadata:
          creationTimestamp: null
          labels:
            io.kompose.service: "${NAME}${SUFFIX}"
        spec:
          containers:
            - env:
                - name: OC_APP
                  value: "${OC_APP}"
                - name: SUFFIX
                  value: "${SUFFIX}"
                - name: PATH
                  value: "/opt/rh/rh-dotnet22/root/usr/lib64/dotnet:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                - name: ASPNETCORE_ENVIRONMENT
                  value: ${ASPNETCORE_ENVIRONMENT}
                - name: ASPNETCORE_HTTPS_PORT
                  value: "5001"
                - name: ASPNETCORE_URLS
                  value: "http://+:8080"
                - name: FRONTEND_URL
                  value: "${HTTP_SCHEMA}://${VANITY_URL}"
                - name: JWT_SIGNING_KEY
                  value: SdqlA0Y5e6HMAK1wm6iHHHz2u37XGtlo
                - name: JWT_ADMIN_CLIENT
                  value: "prime-admin-${OC_APP}"
                - name: JWT_USER_CLIENT
                  value: "prime-application-${OC_APP}"
                - name: JWT_AUDIENCE
                  value: "prime-web-api"
                - name: DB_HOST
                  value: "postgresql${SUFFIX}"
                - name: PHARMANET_API_URL
                  valueFrom:
                    secretKeyRef:
                      key: API_URL
                      name: "pharmanet-api"
                - name: PHARMANET_API_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: API_USERNAME
                      name: "pharmanet-api"
                - name: PHARMANET_API_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: API_PASSWORD
                      name: "pharmanet-api"
                - name: PHARMANET_SSL_CERT_FILENAME
                  value: "/opt/app-root/etc/certs/pharmanet-api-cert.pfx"
                - name: PHARMANET_SSL_CERT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: SSL_CERT_PASSWORD
                      name: "pharmanet-api"
                - name: MAIL_SERVER_URL
                  valueFrom:
                    secretKeyRef:
                      key: MAIL_SERVER_URL
                      name: "mailserver"
                - name: MAIL_SERVER_PORT
                  valueFrom:
                    secretKeyRef:
                      key: MAIL_SERVER_PORT
                      name: "mailserver"
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: "postgresql-secret"
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: "postgresql-secret"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: "postgresql-secret"
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: "postgresql-secret"
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: "postgresql-secret"
                - name: KEYCLOAK_URL
                  valueFrom:
                    secretKeyRef:
                      key: KEYCLOAK_URL
                      name: "keycloak"
                - name: KEYCLOAK_REALM
                  valueFrom:
                    secretKeyRef:
                      key: KEYCLOAK_REALM
                      name: "keycloak"
                - name: KEYCLOAK_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: KEYCLOAK_CLIENT_ID
                      name: "keycloak"
                - name: JWT_WELL_KNOWN_CONFIG
                  valueFrom:
                    secretKeyRef:
                      key: JWT_WELL_KNOWN_CONFIG
                      name: "keycloak" 
              image: " "
              name: primeapi
              ports:
                - containerPort: 5000
                - containerPort: 5001
                - containerPort: 8080
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /api/healthcheck
                  port: 8080
                  scheme: "HTTP"
                initialDelaySeconds: 30
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 10
              resources: {}
              volumeMounts:
                - name: cert-volume
                  mountPath: /opt/app-root/etc/certs
                  readOnly: true
          volumes:
            - name: cert-volume
              secret:
                secretName: ssl-certs
          restartPolicy: Always
      test: false
      triggers:
        - type: ConfigChange
        - imageChangeParams:
            automatic: true
            containerNames:
              - primeapi
            from:
              kind: ImageStreamTag
              name: "${NAME}${SUFFIX}:latest"
          type: ImageChange
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: "${NAME}${SUFFIX}"
      name: "${NAME}${SUFFIX}"
    spec:
      ports:
        - name: "8080"
          port: 8080
          targetPort: 8080
        - name: "5000"
          port: 5000
          targetPort: 5000
        - name: "5001"
          port: 5001
          targetPort: 5001
      selector:
        io.kompose.service: "${NAME}${SUFFIX}"
    status:
      loadBalancer: {}
