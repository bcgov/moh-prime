---
apiVersion: v1
kind: Template
metadata:
  name: dotnet-webapi-dc
  creationTimestamp: null
  description: >-
    Deployment configuration template for PRIME's .NET web API.
parameters:
- name: NAME
  displayName: Name
  description: A prefix appended to all objects
  required: true
- name: SUFFIX
  displayName: Name Suffix
  description: A suffix appended to all objects
  required: false
- name: VERSION
  required: true
- name: SOURCE_CONTEXT_DIR
  required: true
  value: prime-dotnet-webapi
- name: SOURCE_REPOSITORY_URL
  required: true
  value: "https://github.com/bcgov/moh-prime"
- name: SOURCE_REPOSITORY_REF
  required: true
- name: OC_NAMESPACE
  required: true
- name: OC_APP
  required: true
- name: ASPNETCORE_ENVIRONMENT
  value: Release
- name: VANITY_URL
  required: true
  value: "pharmanetenrolment.gov.bc.ca"
- name: HTTP_SCHEMA
  required: true
  value: "https"
- name: HTTP_PORT
  required: true
  value: "8443"
- name: TERMINATION_TYPE
  required: true
  value: "passthrough"
objects:
# .NET Web API - Deployment Configuration
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      kompose.cmd: >-
        kompose convert --provider=openshift --build=build-config
        --build-repo=https://github.com/bcgov/moh-prime.git
        --build-branch=develop --deployment-config
      kompose.version: 1.18.0 (06a2e56)
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}"
    name: "${NAME}${SUFFIX}"
  spec:
    completionDeadlineSeconds: 1200
    replicas: 1
    selector:
      io.kompose.service: "${NAME}${SUFFIX}"
    strategy: null
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: "${NAME}${SUFFIX}"
      spec:
        containers:
          - env:
              # Explicit environment variables
              - name: OC_APP
                value: "${OC_APP}"
              - name: SUFFIX
                value: "${SUFFIX}"
              - name: PATH
                value: "/opt/rh/rh-dotnet22/root/usr/lib64/dotnet:/opt/app-root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
              - name: ASPNETCORE_ENVIRONMENT
                value: ${ASPNETCORE_ENVIRONMENT}
              - name: ASPNETCORE_HTTPS_PORT
                value: "5001"
              - name: ASPNETCORE_URLS
                value: "http://+:8080"
              - name: FRONTEND_URL
                value: "${HTTP_SCHEMA}://${VANITY_URL}"
              - name: JWT_SIGNING_KEY
                value: SdqlA0Y5e6HMAK1wm6iHHHz2u37XGtlo
              - name: JWT_ADMIN_CLIENT
                value: "prime-admin-${OC_APP}"
              - name: JWT_USER_CLIENT
                value: "prime-application-${OC_APP}"
              - name: JWT_AUDIENCE
                value: "prime-web-api"
              - name: BACKEND_URL
                value: "https://${VANITY_URL}/api/v1/"
              - name: DB_HOST
                value: "postgresql${SUFFIX}"
              
              # Canada Post AddressComplete API related environment variables
              - name: ADDRESS_AUTOCOMPLETE_API_KEY
                valueFrom:
                  secretKeyRef:
                    key: ADDRESS_AUTOCOMPLETE_API_KEY
                    name: "canada-post-addresscomplete-secrets"
              - name: ADDRESS_AUTOCOMPLETE_API_URL
                valueFrom:
                  secretKeyRef:
                    key: ADDRESS_AUTOCOMPLETE_API_URL
                    name: "canada-post-addresscomplete-secrets"

              # CHES (Common Hosted Email Service) related environment variables
              - name: CHES_API_URL
                valueFrom:
                  secretKeyRef:
                    key: CHES_API_URL
                    name: "ches-secrets"
              - name: CHES_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: CHES_CLIENT_SECRET
                    name: "ches-secrets"
              - name: CHES_ENABLED
                valueFrom:
                  secretKeyRef:
                    key: CHES_ENABLED
                    name: "ches-secrets"
              - name: CHES_TOKEN_URL
                valueFrom:
                  secretKeyRef:
                    key: CHES_TOKEN_URL
                    name: "ches-secrets"
              
              # Document Manager related environment variables
              - name: DOCUMENT_MANAGER_CLIENT_ID
                value: prime-document-manager
              - name: DOCUMENT_MANAGER_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    key: DOCUMENT_MANAGER_CLIENT_SECRET
                    name: "document-manager-secret"
              - name: DOCUMENT_MANAGER_URL
                value: "https://${VANITY_URL}/api/docman/"

              # JWT environment variable
              - name: JWT_WELL_KNOWN_CONFIG
                valueFrom:
                  secretKeyRef:
                    key: JWT_WELL_KNOWN_CONFIG
                    name: "keycloak"

              # Keycloak related environment variables
              - name: KEYCLOAK_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    key: KEYCLOAK_CLIENT_ID
                    name: "keycloak"
              - name: KEYCLOAK_REALM
                valueFrom:
                  secretKeyRef:
                    key: KEYCLOAK_REALM
                    name: "keycloak"
              - name: KEYCLOAK_TOKEN_URL
                valueFrom:
                  secretKeyRef:
                    key: KEYCLOAK_TOKEN_URL
                    name: "keycloak"
              - name: KEYCLOAK_URL
                valueFrom:
                  secretKeyRef:
                    key: KEYCLOAK_URL
                    name: "keycloak"
              
              # Mail server environment variables
              - name: MAIL_SERVER_PORT
                valueFrom:
                  secretKeyRef:
                    key: MAIL_SERVER_PORT
                    name: "mailserver"
              - name: MAIL_SERVER_URL
                valueFrom:
                  secretKeyRef:
                    key: MAIL_SERVER_URL
                    name: "mailserver"
              
              # Pharmanet API environment variables
              - name: PHARMANET_API_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: API_PASSWORD
                    name: "pharmanet-api"
              - name: PHARMANET_API_URL
                valueFrom:
                  secretKeyRef:
                    key: API_URL
                    name: "pharmanet-api"
              - name: PHARMANET_API_USERNAME
                valueFrom:
                  secretKeyRef:
                    key: API_USERNAME
                    name: "pharmanet-api"
              - name: PHARMANET_SSL_CERT_FILENAME
                value: "/opt/app-root/etc/certs/pharmanet-api-cert.pfx"
              - name: PHARMANET_SSL_CERT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: SSL_CERT_PASSWORD
                    name: "pharmanet-api"

              # PostgreSQL related environment variables
              - name: POSTGRESQL_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: "postgresql-secret"
              - name: POSTGRESQL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-admin-password
                    name: "postgresql-secret"
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-admin-password
                    name: "postgresql-secret"
              - name: POSTGRESQL_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-admin-password
                    name: "postgresql-secret"
              - name: POSTGRESQL_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: "postgresql-secret"
              
              # Verifiable Credential related environment variables
              - name: VERIFIABLE_CREDENTIAL_API_KEY
                valueFrom:
                  secretKeyRef:
                    key: VERIFIABLE_CREDENTIAL_API_KEY
                    name: "verifiable-credential-secrets"
              - name: VERIFIABLE_CREDENTIAL_API_URL
                valueFrom:
                  secretKeyRef:
                    key: VERIFIABLE_CREDENTIAL_API_URL
                    name: "verifiable-credential-secrets"
              - name: VERIFIABLE_CREDENTIAL_WEBHOOK_KEY
                valueFrom:
                  secretKeyRef:
                    key: VERIFIABLE_CREDENTIAL_WEBHOOK_KEY
                    name: "verifiable-credential-secrets"
            image: " "
            name: primeapi
            ports:
              - containerPort: 5000
              - containerPort: 5001
              - containerPort: 8080
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /api/healthcheck
                port: 8080
                scheme: "HTTP"
              initialDelaySeconds: 30
              periodSeconds: 30
              successThreshold: 1
              timeoutSeconds: 10
            volumeMounts:
              # Create directory for storing .NET Web API SSL certificate
              - name: cert-volume
                mountPath: /opt/app-root/etc/certs
                readOnly: true
        volumes:
          # Placement of .NET Web API SSL certificate
          - name: cert-volume
            secret:
              secretName: ssl-certs
        restartPolicy: Always
    test: false
    triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
            - primeapi
          from:
            kind: ImageStreamTag
            name: "${NAME}${SUFFIX}:latest"
        type: ImageChange
  status: {}

# .NET Web API service (endpoint for internal routing to related pods)
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: "${NAME}${SUFFIX}"
    name: "${NAME}${SUFFIX}"
  spec:
    ports:
      - name: "8080"
        port: 8080
        targetPort: 8080
      - name: "5000"
        port: 5000
        targetPort: 5000
      - name: "5001"
        port: 5001
        targetPort: 5001
    selector:
      io.kompose.service: "${NAME}${SUFFIX}"
