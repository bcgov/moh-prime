<?xml version="1.0"?>
<doc>
    <assembly>
        <name>prime</name>
    </assembly>
    <members>
        <member name="M:Prime.Configuration.Auth.AuthenticationSetup.FlattenRealmAccessRoles(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Flattens the Realm Access claim, as Microsoft Identity Model doesn't support nested claims
            </summary>
        </member>
        <member name="M:Prime.Configuration.Auth.KeycloakUrls.Token(System.String)">
            <summary>
            Returns the URL for OAuth token issuance.
            </summary>
            <param name="realmUrl">URL of the keycloak instance up to the realm name; I.e. "[base url]/auth/realms/[realm name]"</param>
        </member>
        <member name="M:Prime.Configuration.Auth.KeycloakUrls.WellKnownConfig(System.String)">
            <summary>
            Returns the URL for the OAuth well-known config.
            </summary>
            <param name="realmUrl">URL of the keycloak instance up to the realm name; I.e. "[base url]/auth/realms/[realm name]"</param>
        </member>
        <member name="T:Prime.Configuration.Database.CollegeForPlrRoleTypeConfiguration">
            <summary>
            PLR currently doesn't collect data for some Role Types (e.g. MOA) and/or
            some Role Types (e.g. KN) don't have colleges associated with them.
            </summary>
        </member>
        <member name="P:Prime.Configuration.Database.IdentifierTypeConfiguration.SeedData">
            <summary>
            This was initially populated from the Excel spreadsheet "Appendix-A-BC-PLR-OID-list.xls" obtained from Sekhon, Khushwinder (Vinder) of the PLR team.
            PRIME will not necessarily receive data that uses all these OIDs.  For example, there are no plans for PLR to provide data containing MOAID and PPID.
            </summary>
        </member>
        <member name="T:Prime.Configuration.Internal.VerifiableCredentialApiConfiguration">
            <summary>
            Aries Prime Agent
            </summary>
        </member>
        <member name="T:Prime.Configuration.Internal.AddressAutocompleteApiConfiguration">
            <summary>
            Canada Post Address Validation
            </summary>
        </member>
        <member name="M:Prime.Controllers.AddressAutocompleteController.Find(System.String,System.String)">
            <summary>
            Gets autocomplete results
            Find addresses matching the search term.
            </summary>
            <param name="searchTerm"></param>
            <param name="lastId"></param>
        </member>
        <member name="M:Prime.Controllers.AddressAutocompleteController.Retrieve(System.String)">
            <summary>
            Gets autocomplete retrieve result
            Returns the full address details based on the Id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Prime.Controllers.AdminsController.CreateAdmin(Prime.Models.Admin)">
            <summary>
            Creates a new Admin.
            </summary>
        </member>
        <member name="M:Prime.Controllers.AdminsController.GetAdmins">
            <summary>
            Gets all the admins.
            </summary>
        </member>
        <member name="M:Prime.Controllers.AdminsController.GetAdminById(System.Int32)">
            <summary>
            Gets a specific Admin.
            </summary>
            <param name="adminId"></param>
        </member>
        <member name="M:Prime.Controllers.AdminsController.GetMetabaseEmbeddedString">
            <summary>
            Returns a time sensitive metabase embedded url string
            </summary>
        </member>
        <member name="M:Prime.Controllers.AgreementsController.GetLatestAgreementVersions(System.Nullable{Prime.Models.AgreementGroup})">
            <summary>
            Get a list of the latest Agreement Versions
            </summary>
        </member>
        <member name="M:Prime.Controllers.AgreementsController.GetAgreementVersionById(System.Int32)">
            /api/agreements/2
            <summary>
            Get an Agreement Version by id
            </summary>
            <param name="agreementVersionId"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.GetAuthorizedUserByUserId(System.Guid)">
            <summary>
            Gets a AuthorizedUser by user ID.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.GetAuthorizedUserById(System.Int32)">
            <summary>
            Gets a specific AuthorizedUser.
            </summary>
            <param name="authorizedUserId"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.GetAuthorizedUserSites(System.Int32)">
            <summary>
            Gets a specific AuthorizedUser's sites.
            </summary>
            <param name="authorizedUserId"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.CreateAuthorizedUser(Prime.ViewModels.Parties.AuthorizedUserChangeModel)">
            <summary>
            Creates a new AuthorizedUser.
            </summary>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.UpdateAuthorizedUser(System.Int32,Prime.ViewModels.Parties.AuthorizedUserChangeModel)">
            <summary>
            Updates a specific AuthorizedUser.
            </summary>
            <param name="authorizedUserId"></param>
            <param name="updatedAuthorizedUser"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.ActivateAuthorizedUser(System.Int32)">
            <summary>
            Activates the authorized user.
            </summary>
            <param name="authorizedUserId"></param>
        </member>
        <member name="M:Prime.Controllers.AuthorizedUsersController.ApproveAuthorizedUser(System.Int32)">
            <summary>
            Approves the authorized user.
            </summary>
            <param name="authorizedUserId"></param>
        </member>
        <member name="M:Prime.Controllers.BannersController.CreateBanner(Prime.ViewModels.BannerViewModel,Prime.Models.BannerLocationCode)">
            <summary>
            Create a banner
            </summary>
            <param name="viewModel"></param>
            <param name="locationCode"></param>
        </member>
        <member name="M:Prime.Controllers.BannersController.UpdateBanner(System.Int32,Prime.ViewModels.BannerViewModel)">
            <summary>
            Update banner
            </summary>
            <param name="bannerId"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:Prime.Controllers.BannersController.DeleteBanner(System.Int32)">
            <summary>
            Delete a banner by id
            </summary>
            <param name="bannerId"></param>
        </member>
        <member name="M:Prime.Controllers.BannersController.GetBannerById(System.Int32)">
            <summary>
            Get Banner by Id
            </summary>
            <param name="bannerId"></param>
        </member>
        <member name="M:Prime.Controllers.BannersController.GetEnrolmentLandingBanners">
            <summary>
            Get enrollee landing banners
            </summary>
        </member>
        <member name="M:Prime.Controllers.BannersController.GetSiteLandingBanners">
            <summary>
            Get Site Landing Banners
            </summary>
        </member>
        <member name="M:Prime.Controllers.BannersController.GetActiveBannersByLocationCode(Prime.Models.BannerLocationCode)">
            <summary>
            Gets the active Banners by location code. Returns empty array if no banner found
            </summary>
            <param name="locationCode"></param>
        </member>
        <member name="M:Prime.Controllers.ClientLogsController.CreateLog(Prime.ViewModels.ClientLogViewModel)">
            <summary>
            Creates a client log
            </summary>
        </member>
        <member name="M:Prime.Controllers.DocumentAccessController.GetDocumentByAccessToken(System.Guid)">
            <summary>
            Gets the Document for downloading based on the supplied Document Access Token GUID.
            </summary>
            <remarks>This endpoint is not authenticated.</remarks>
        </member>
        <member name="M:Prime.Controllers.DocumentAccessController.DeleteDocumentAccessToken(System.Guid)">
            <summary>
            Delete a Document Access Token.
            </summary>
        </member>
        <member name="M:Prime.Controllers.DocumentManagerController.InitializeFileUploadWithDocumentManager">
            <summary>
            Initialize uploading of a file with the Document Manager.
            </summary>
        </member>
        <member name="M:Prime.Controllers.DocumentManagerController.GetFileFromDocumentManager(System.Guid)">
            <summary>
            Returns a short lived single-use token to download a file from the document manager
            </summary>
        </member>
        <member name="M:Prime.Controllers.EmailsController.UpdateEmailLogStatuses(System.Int32)">
            <summary>
            Update all logged email statuses sent using the CHES email service
            </summary>
            <param name="limit"></param>
        </member>
        <member name="M:Prime.Controllers.EmailsController.SendEnrolleeRenewalEmails">
            <summary>
            Send enrollee renewal reminder emails
            </summary>
        </member>
        <member name="M:Prime.Controllers.EmailsController.SendEnrolleeUnsignedToaReminderEmails">
            <summary>
            Send enrollee unsigned TOA reminder emails
            </summary>
        </member>
        <member name="M:Prime.Controllers.EmailsController.GetEmailTemplates">
            <summary>
            Get email templates
            </summary>
        </member>
        <member name="M:Prime.Controllers.EmailsController.GetEmailTemplate(System.Int32)">
            <summary>
            Get email template by ID
            </summary>
            <param name="emailTemplateId"></param>
        </member>
        <member name="M:Prime.Controllers.EmailsController.UpdateEmailTemplate(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Update email template
            </summary>
            <param name="emailTemplateId"></param>
            <param name="template"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.GetEnrolleeAgreements(System.Int32,Prime.Models.Api.AgreementFilters)">
            <summary>
            Get a list of the enrollee's agreements.
            </summary>
            <param name="enrolleeId"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.GetEnrolleeEnrolmentCards(System.Int32,Prime.Models.Api.AgreementFilters)">
            <summary>
            Get a list of the enrollee's enrolment card view models.
            </summary>
            <param name="enrolleeId"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.GetAgreement(System.Int32,System.Int32)">
            <summary>
            Get a specific agreement for an enrollee.
            </summary>
            <param name="enrolleeId"></param>
            <param name="agreementId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.GetSubmissionForAgreement(System.Int32,System.Int32)">
            <summary>
            Get the submission for a given agreement.
            </summary>
            <param name="enrolleeId"></param>
            <param name="agreementId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.GetAccessTermSignable(System.Int32,System.Int32)">
            <summary>
            Downloads a specific unsigned access term for an enrollee.
            </summary>
            <param name="enrolleeId"></param>
            <param name="agreementId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleeAgreementsController.IsOboToRuAgreementTypeChange(System.Int32)">
            <summary>
            Gets boolean re: whether enrollee's current agreement type is OBO and the agreement type
            they would be assigned is RU, if automatic assignment occurred today
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.CreateEnrolleePaperSubmission(Prime.ViewModels.PaperEnrollees.PaperEnrolleeDemographicViewModel)">
            <summary>
            Creates a new Enrollee Paper Submission.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionAgreement(System.Int32,Prime.ViewModels.PaperEnrollees.PaperEnrolleeAgreementViewModel)">
            <summary>
            Updates a Paper Submission's Agreement.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionCareSettings(System.Int32,Prime.ViewModels.PaperEnrollees.PaperEnrolleeCareSettingViewModel)">
            <summary>
            Updates a Paper Submission's Care Settings.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionCertifications(System.Int32,System.Collections.Generic.ICollection{Prime.ViewModels.PaperEnrollees.PaperEnrolleeCertificationViewModel})">
            <summary>
            Updates a Paper Submission's Certifications.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionDeviceProvider(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Updates a Paper Submission's Device Provider Informaion.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionDemographics(System.Int32,Prime.ViewModels.PaperEnrollees.PaperEnrolleeDemographicViewModel)">
            <summary>
            Updates a Paper Submission's demographic information.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionOboSites(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.PaperEnrollees.PaperEnrolleeOboSiteViewModel})">
            <summary>
            Updates a Paper Submission's OBO Sites.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionSelfDeclarations(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.PaperEnrollees.PaperEnrolleeSelfDeclarationViewModel})">
            <summary>
            Updates a Paper Submission's Self Declaration information.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdateEnrolleePaperSubmissionDocuments(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.PaperEnrollees.PaperEnrolleeDocumentViewModel})">
            <summary>
            Updates a Paper Submission's Documents.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.SetEnrolleePaperSubmissionProfileCompleted(System.Int32)">
            <summary>
            Sets the Paper Submission's profile as "completed", allowing frontend and backend behavioural changes.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.GetAdjudicationDocuments(System.Int32)">
            <summary>
            Gets all enrollee adjudication documents for a paper enrollee.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.FinalizeEnrolleePaperSubmission(System.Int32)">
            <summary>
            Finalizes a Paper Submission.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.CheckForMatchingPaperSubmission(System.DateTime)">
            <summary>
            Checks if there are any unclaimed paper Enrollees submissions with the supplied date of birth.
            </summary>
            <param name="dateOfBirth"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.CreateOrUpdateLinkedGpid(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            User supplied GPID to match with a previously submitted Paper Enrolment.
            Cannot set a linked GPID on Paper Submissions or on Enrollees already linked to a Paper Submission.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.GetLinkedGpid(System.Int32)">
            <summary>
            Gets the linked GPID
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleePaperSubmissionsController.UpdatePaperEnrolleeDateOfBirth(System.Int32,Prime.Models.Api.FromBodyData{System.DateTime})">
            <summary>
             Updates the date of birth on an unlinked paper enrolment
            </summary>
            <param name="enrolleeId"></param>
            <param name="dateOfBirth"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetEnrollees(Prime.Models.Api.EnrolleeSearchOptions)">
            <summary>
            Gets all of the enrollees.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.CreateEnrollee(Prime.Models.Api.EnrolleeCreatePayload)">
            <summary>
            Creates a new Enrollee.
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetEnrolleeById(System.Int32)">
            <summary>
            Gets a specific Enrollee.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetEnrolleeByUserId(System.Guid)">
            <summary>
            Gets a specific Enrollee by User ID.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.UpdateEnrollee(System.Int32,Prime.ViewModels.EnrolleeUpdateModel,System.Boolean)">
            <summary>
            Updates a specific Enrollee.
            </summary>
            <param name="enrolleeId"></param>
            <param name="enrollee"></param>
            <param name="beenThroughTheWizard"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.DeleteEnrollee(System.Int32)">
            <summary>
            Deletes a specific Enrollee.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetAccessAgreementNote(System.Int32)">
            <summary>
            Gets an Enrollee's Access Agreement note.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetCareSettingCodes(System.Int32)">
            <summary>
            Gets an Enrollee's Care Setting(s) and/or Health Authorities (as applicable).
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetCertifications(System.Int32)">
            <summary>
            Gets an Enrollee's Certifications.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetEnrolleeRemoteUsers(System.Int32)">
            <summary>
            Gets an Enrollee's Remote Users.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetOboSites(System.Int32)">
            <summary>
            Gets an Enrollee's Obo Sites.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetRemoteAccessLocations(System.Int32)">
            <summary>
            Gets an Enrollee's Remote Access Locations.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetRemoteAccessSites(System.Int32)">
            <summary>
            Gets an Enrollee's Remote Access Sites.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetSelfDeclarations(System.Int32)">
            <summary>
            Gets an Enrollee's Self Declarations.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetSelfDeclarationDocuments(System.Int32,System.Boolean)">
            <summary>
            Gets an Enrollee's Self Declaration Documents.
            </summary>
            <param name="enrolleeId"></param>
            <param name="includeHidden"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.CreateEnrolleeAbsence(System.Int32,Prime.ViewModels.EnrolleeAbsenceViewModel)">
            <summary>
            Creates a new enrollee absence.
            </summary>
            <param name="enrolleeId"></param>
            <param name="createModel"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetAbsences(System.Int32,System.Boolean)">
            <summary>
            Gets enrollee absences
            </summary>
            <param name="enrolleeId"></param>
            <param name="includesPast"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.GetCurrentAbsence(System.Int32)">
            <summary>
            Gets your current absence
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.EndCurrentEnrolleeAbsence(System.Int32)">
            <summary>
            Ends an current enrollee absence.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.DeleteFutureEnrolleeAbsence(System.Int32,System.Int32)">
            <summary>
            Deletes a specific Enrollee absence.
            </summary>
            <param name="enrolleeId"></param>
            <param name="absenceId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesController.SendEnrolleeAbsenceEmail(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
               Sends Enrollee Absence Notification Email
            </summary>
            <param name="enrolleeId"></param>
            <param name="email"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetAdjacentEnrolleeId(System.Int32)">
            <summary>
            Gets adjacent next and previous enrollee IDs for a given enrolleeId
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolmentStatuses(System.Int32)">
            <summary>
            Gets all of the status changes for a specific Enrollee, including referenced Adjudicator Notes.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetAdjudicatorNotes(System.Int32)">
            <summary>
            Gets all of the adjudicator notes for a specific Enrollee.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateAdjudicatorNote(System.Int32,Prime.Models.Api.FromBodyText,System.Boolean)">
            <summary>
            Creates a new adjudicator note on an enrollee.
            </summary>
            <param name="enrolleeId"></param>
            <param name="note"></param>
            <param name="link"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateEnrolmentReference(System.Int32)">
            <summary>
            Creates a new Enrolment Status Reference on the enrollee's current status.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.UpdateAccessAgreementNote(System.Int32,Prime.Models.AccessAgreementNote)">
            <summary>
            Updates an access agreement note.
            </summary>
            <param name="enrolleeId"></param>
            <param name="accessAgreementNote"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.SetEnrolleeAdjudicator(System.Int32,System.Int32)">
            <summary>
            Set an enrollee's assigned adjudicator.
            </summary>
            <param name="enrolleeId"></param>
            <param name="adjudicatorId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetAdjudicatorIdir(System.Int32)">
            <summary>
            Gets the adjudicator for an enrollee
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.RemoveEnrolleeAdjudicator(System.Int32)">
            <summary>
            Remove an enrollee's assigned adjudicator.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolleeBusinessEvents(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a list of enrollee events.
            </summary>
            <param name="enrolleeId"></param>
            <param name="businessEventTypeCodes"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.SendEnrolleeReminderEmail(System.Int32)">
            <summary>
            Send an enrollee a reminder email.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateInitiatedEnrolleeEmailEvent(System.Int32)">
            <summary>
            Logs a business event for email initiated
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateSelfDeclarationDocument(System.Int32,Prime.Models.SelfDeclarationDocument)">
            <summary>
            Create Self Declaration Document Link
            </summary>
            <param name="enrolleeId"></param>
            <param name="selfDeclarationDocument"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetSelfDeclarationDocument(System.Int32,System.Int32)">
            <summary>
            Get the self Declaration document download token.
            </summary>
            <param name="enrolleeId"></param>
            <param name="selfDeclarationDocumentId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetIdentificationDocument(System.Int32,System.Int32)">
            <summary>
            Get the Identification Document download token.
            </summary>
            <param name="enrolleeId"></param>
            <param name="identificationDocumentId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateEnrolleeAdjudicationDocument(System.Int32,System.Guid)">
            <summary>
            Creates a new enrollee adjudication document for an enrollee.
            </summary>
            <param name="documentGuid"></param>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolleeAdjudicationDocuments(System.Int32)">
            <summary>
            Gets all enrollee adjudication documents for an enrollee.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolleeAdjudicationDocument(System.Int32,System.Int32)">
            <summary>
            Get the enrollee adjudication documents download token.
            </summary>
            <param name="enrolleeId"></param>
            <param name="documentId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.DeleteEnrolleeAdjudicationDocument(System.Int32)">
            <summary>
            Delete the enrollee's adjudication document
            </summary>
            <param name="documentId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolleeCurrentStatus(System.Int32)">
            <summary>
            Get the enrollees current status
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.CreateEnrolleeNotification(System.Int32,System.Int32,Prime.Models.Api.FromBodyData{System.Int32})">
            <summary>
            Creates a new enrollee notification on an enrollee note.
            </summary>
            <param name="enrolleeId"></param>
            <param name="adjudicatorNoteId"></param>
            <param name="assigneeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.DeleteEnrolleeNotification(System.Int32,System.Int32)">
            <summary>
            deletes the notification on an enrollees note.
            </summary>
            <param name="enrolleeId"></param>
            <param name="adjudicatorNoteId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetNotifications(System.Int32)">
            <summary>
            Get the enrollee note on an enrollee that has a notification for current admin user.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.DeleteEnrolleeNotifications(System.Int32)">
            <summary>
            Delete all notifications on an enrollee
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetEnrolleeEmails(Prime.Models.BulkEmailType)">
            <summary>
            Gets all of the enrollee emails that match the type
            </summary>
            <param name="bulkEmailType"></param>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetQrCode(System.Int32)">
            <summary>
            Gets and Enrollee's Verifiable Credential qrcode invitation
            </summary>
        </member>
        <member name="M:Prime.Controllers.EnrolleesExtendedController.GetPlrData(System.Int32)">
            <summary>
            Gets all PLR data matching the Enrollee's License Number(s)
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.GisController.CreateGisParty(Prime.ViewModels.Parties.GisChangeModel)">
            <summary>
            Creates a new Gis Enrolment
            </summary>
        </member>
        <member name="M:Prime.Controllers.GisController.UpdateGisEnrollee(System.Int32,Prime.ViewModels.Parties.GisChangeModel)">
            <summary>
            Updates a specific Gis Enrolment.
            </summary>
            <param name="gisId"></param>
            <param name="changeModel"></param>
        </member>
        <member name="M:Prime.Controllers.GisController.GetGisEnrolmentById(System.Int32)">
            <summary>
            Gets a specific Gis Enrolment.
            </summary>
            <param name="gisId"></param>
        </member>
        <member name="M:Prime.Controllers.GisController.GetGisEnrolmentByUserId(System.Guid)">
            <summary>
            Gets a specific Gis Enrolment by userId
            </summary>
            /// <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.GisController.LdapLogin(System.Int32,Prime.Models.Api.LdapLoginPayload)">
            <summary>
            Login to ldap using username and password
            </summary>
            <param name="gisId"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Prime.Controllers.GisController.SubmitGis(System.Int32)">
            <summary>
            Submits the given Gis enrolment.
            </summary>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetHealthAuthorities">
            <summary>
            Gets all of the Health Authority Organizations.
            </summary>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetHealthAuthorityById(System.Int32)">
            <summary>
            Gets a specific Health Authority Organization.
            </summary>
            <param name="healthAuthorityId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetAuthorizedUsers(System.Int32)">
            <summary>
            Get the Authorized Users for a Health Authority
            </summary>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetAllHealthAuthoritySites">
            <summary>
            Gets all sites for any health authority.
            </summary>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdateCareTypes(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates a specific Health Authority's care types.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="careTypes"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdateVendors(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Updates a specific Health authorities vendors.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="vendors"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdatePrivacyOffice(System.Int32,Prime.ViewModels.HealthAuthorities.PrivacyOfficeViewModel)">
            <summary>
            Updates the Privacy Office on a Health Authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="privacyOffice"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdatePrivacyOfficerContacts(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.ContactViewModel})">
            <summary>
            Updates the Privacy Officer contacts on a Health Authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="contacts"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdateTechnicalSupportContacts(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.HealthAuthorities.TechnicalSupportContactViewModel})">
            <summary>
            Updates the Technical Support contacts on a Health Authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="contacts"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.UpdatePharmanetAdministratorContacts(System.Int32,System.Collections.Generic.IEnumerable{Prime.ViewModels.ContactViewModel})">
            <summary>
            Updates the Pharmanet Administrator contacts on a Health Authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="contacts"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetSitesByVendor(System.Int32,System.Int32)">
            <summary>
            returns a list of site ids for a given vendor and health authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="healthAuthorityVendorId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetSitesByCareType(System.Int32,System.Int32)">
            <summary>
            returns a list of site ids for a given care type and health authority
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="healthAuthorityCareTypeId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.CreateOrUpdateOgranizationAgreement(System.Int32,System.Guid)">
            <summary>
               Create or Update health auth organization agreement
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="documentGuid"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritiesController.GetOgranizationAgreementDocumentToken(System.Int32)">
            <summary>
            Gets a download token for the latest organization agreement for a health authority.
            </summary>
            <param name="healthAuthorityId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.CreateHealthAuthoritySite(System.Int32,Prime.ViewModels.HealthAuthoritySites.HealthAuthoritySiteCreateModel)">
            <summary>
            Creates a new health authority site.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="payload"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.GetHealthAuthoritySites(System.Int32,System.Int32)">
            <summary>
            Gets all of the sites for a health authority.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="healthAuthoritySiteId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.GetHealthAuthoritySite(System.Int32,System.Int32)">
            <summary>
            Gets a specific health authority site.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.GetHealthAuthorityAdminSite(System.Int32,System.Int32)">
            <summary>
            Gets a specific health authority site for an admin.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.GetHoursOfOperation(System.Int32,System.Int32)">
            <summary>
            Gets a Site's hours of operations.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.UpdateHealthAuthoritySite(System.Int32,System.Int32,Prime.ViewModels.HealthAuthoritySites.HealthAuthoritySiteUpdateModel)">
            <summary>
            Updates a health authority site.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
            <param name="updateModel"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.SetHealthAuthoritySiteCompleted(System.Int32,System.Int32)">
            <summary>
            Sets the health authority site as "completed", allowing frontend and backend behavioural changes.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.HealthAuthoritySitesController.HealthAuthoritySiteSubmission(System.Int32,System.Int32,Prime.ViewModels.HealthAuthoritySites.HealthAuthoritySiteUpdateModel)">
            <summary>
            Submits a health authority site.
            </summary>
            <param name="healthAuthorityId"></param>
            <param name="siteId"></param>
            <param name="updateModel"></param>
        </member>
        <member name="M:Prime.Controllers.HealthcheckController.GetHealthcheck">
            <summary>
            Does a healthcheck that queries the care setting lookup table to wake up the database
            </summary>
        </member>
        <member name="M:Prime.Controllers.LookupsController.GetLookups">
            <summary>
            Gets all the lookup code values.
            </summary>
        </member>
        <member name="M:Prime.Controllers.LookupsController.LicenceCodeTest(System.String,System.String)">
            <summary>
            For testing college licence validation
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetOrganizationById(System.Int32)">
            <summary>
            Gets a specific Organization.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.CreateOrganization(Prime.ViewModels.CreateOrganizationViewModel)">
            <summary>
            Creates a new Organization.
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.ClaimOrganization(Prime.ViewModels.OrganizationClaimViewModel)">
            <summary>
            Claim an existing Organization.
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.OrganizationClaimExists(Prime.Models.Api.OrganizationClaimSearchOptions)">
            <summary>
            Check if organization claim exists by a given search criteria.
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetOrganizationClaimByOrgId(System.Int32)">
            <summary>
            Find OrganizationClaim by Organization ID.
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.ApproveOrganizationClaim(System.Int32,System.Int32)">
            <summary>
            Approve claim for an existing Organization.
            </summary>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.UpdateOrganization(System.Int32,Prime.ViewModels.OrganizationUpdateModel)">
            <summary>
            Updates a specific Organization.
            </summary>
            <param name="organizationId"></param>
            <param name="updatedOrganization"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.UpdateOrganizationCompleted(System.Int32)">
            <summary>
            Updates an organizations state
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.DeleteOrganization(System.Int32)">
            <summary>
            Deletes a specific Organization.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetOrganizationAgreements(System.Int32)">
            <summary>
            Gets all agreements for a specific Organization.
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.UpdateOrganizationAgreement(System.Int32,System.Int32)">
            <summary>
            Creates a new un-accepted Organization Agreement based on the Care Setting supplied, if a newer version exits
            or if the signing authority has changed.
            Will return a reference to any existing un-accepted agreement instead of creating a new one, if able.
            </summary>
            <param name="organizationId"></param>
            <param name="careSettingCode"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetCareSettingForPendingTransferAgreements(System.Int32)">
            <summary>
            Get the care setting codes for an organization that require agreements
            </summary>
            <param name="organizationId"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetOrganizationAgreement(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the organization agreement text.
            </summary>
            <param name="organizationId"></param>
            <param name="agreementId"></param>
            <param name="asPdf"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetSignableOrganizationAgreement(System.Int32,Prime.Models.AgreementType)">
            <summary>
            Get the organization agreement as a signable PDF, Base 64 encoded.
            </summary>
            <param name="organizationId"></param>
            <param name="agreementType"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.AcceptOrganizationAgreement(System.Int32,System.Int32,System.Nullable{System.Guid})">
            <summary>
            Accept an organization agreement, optionally with a Document GUID of the wet-signed agreement upload
            </summary>
            <param name="organizationId"></param>
            <param name="agreementId"></param>
            <param name="organizationAgreementGuid"></param>
        </member>
        <member name="M:Prime.Controllers.OrganizationsController.GetSignedAgreementToken(System.Int32,System.Int32)">
            <summary>
            Gets a download token for the uploaded wet-signed Agreement Document (if exists).
            </summary>
            <param name="organizationId"></param>
            <param name="agreementId"></param>
        </member>
        <member name="M:Prime.Controllers.PhsaController.CreatePhsaParty(Prime.ViewModels.Parties.PhsaChangeModel)">
            <summary>
            Creates a new PHSA eForms Party of one or more types (currently Labtech and/or Immunizer).
            If successful, also updates Keycloak with additional user info and the relevant role(s).
            </summary>
        </member>
        <member name="M:Prime.Controllers.PhsaController.GetPreApprovedRegistrations(System.String)">
            <summary>
            Returns a list of PHSA eForms registrations this User is pre-approved for.
            </summary>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.BadRequest(System.String)">
            <summary>
            Sends a StatusCodes.Status400BadRequest response with an ApiMessageResponse body.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.Conflict(System.String)">
            <summary>
            Sends a StatusCodes.Status409Conflict response with an ApiMessageResponse body.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.CreatedAtAction``1(System.String,System.Object,``0)">
            <summary>
            Sends a StatusCodes.Status201Created response with an ApiResultResponse body wrapping the value.
            </summary>
            <param name="actionName"></param>
            <param name="routeValues"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.CreatedAtAction``1(System.String,System.String,System.Object,``0)">
            <summary>
            Sends a StatusCodes.Status201Created response with an ApiResultResponse body wrapping the value.
            </summary>
            <param name="actionName"></param>
            <param name="controllerName"></param>
            <param name="routeValues"></param>
            <param name="value"></param>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.NotFound(System.String)">
            <summary>
            Sends a StatusCodes.Status404NotFound response with an ApiMessageResponse body.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prime.Controllers.PrimeControllerBase.Ok``1(``0)">
            <summary>
            Sends a StatusCodes.Status200OK response with an ApiResultResponse body wrapping the value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.GetEnrolmentCertificate(System.Guid)">
            <summary>
            Gets the Enrolment Certificate based on the supplied Access Token GUID. This endpoint is not authenticated.
            </summary>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.GetAccessTokens">
            <summary>
            Gets all of the access tokens for the user.
            </summary>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.SendProvisionerLink(System.Int32,System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Creates an EnrolmentCertificateAccessToken for the user if the user has a finished enrolment,
            then sends the link to a recipient by email based on Care Setting Code.
            </summary>
            <param name="enrolleeId"></param>
            <param name="careSettingCode"></param>
            <param name="providedEmails"></param>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.GetGpid">
            <summary>
            Gets the GPID for the user. Only a valid token is required, no role is required.
            </summary>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.HpdidLookup(System.String[])">
            <summary>
            Gets the GPID and renewal date for the user(s) with the provided HPDIDs (if they exist). Requires a valid direct access grant token.
            </summary>
        </member>
        <member name="M:Prime.Controllers.ProvisionerAccessController.ValidateGpid(System.String,Prime.Models.Api.GpidValidationParameters)">
            <summary>
            Validates the supplied information against the enrollee record with the given GPID. Requires a valid direct access grant token.
            </summary>
        </member>
        <member name="T:Prime.Controllers.SatEnrolmentController">
            <summary>
            "Special Authority Transformation" Controller
            </summary>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.CreateSatEnrollee(Prime.ViewModels.SpecialAuthorityTransformation.SatEnrolleeDemographicChangeModel)">
            <summary>
            Creates a new SAT Enrollee
            </summary>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.GetSatEnrolleeByUserId(System.Guid)">
            <summary>
            Gets a specific SAT Enrollee by userId
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.GetSatEnrolleeById(System.Int32)">
            <summary>
            Gets a specific SAT Enrolment
            </summary>
            <param name="satId"></param>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.UpdateSatEnrollee(System.Int32,Prime.ViewModels.SpecialAuthorityTransformation.SatEnrolleeDemographicChangeModel)">
            <summary>
            Updates a SAT Enrollee's information.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.UpdateSatEnrolleeCertifications(System.Int32,System.Collections.Generic.ICollection{Prime.ViewModels.Parties.PartyCertificationViewModel})">
            <summary>
            Updates a SAT Enrollee's Certifications.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SatEnrolmentController.SubmitSatEnrollee(System.Int32)">
            <summary>
            SAT Enrolment submission
            </summary>
            <param name="satId"></param>
        </member>
        <member name="M:Prime.Controllers.SigningAuthorityController.GetSigningAuthorityByUserId(System.Guid)">
            <summary>
            Gets a SigningAuthority by user ID.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.SigningAuthorityController.GetSigningAuthorityById(System.Int32)">
            <summary>
            Gets a specific SigningAuthority.
            </summary>
            <param name="partyId"></param>
        </member>
        <member name="M:Prime.Controllers.SigningAuthorityController.CreateSigningAuthority(Prime.ViewModels.Parties.SigningAuthorityChangeModel)">
            <summary>
            Creates a new SigningAuthority.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SigningAuthorityController.UpdateSigningAuthority(System.Int32,Prime.ViewModels.Parties.SigningAuthorityChangeModel)">
            <summary>
            Updates a specific SigningAuthority.
            </summary>
            <param name="partyId"></param>
            <param name="updatedSigningAuthority"></param>
        </member>
        <member name="M:Prime.Controllers.SigningAuthorityController.GetSigningAuthorityOrganizationsByUserId(System.Guid)">
            <summary>
            Gets all of the Organizations for a signing authority by userId.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSites(System.Int32,System.Boolean)">
            <summary>
            Gets all of the Sites for an organization, or all sites if user has ADMIN role
            </summary>
            <param name="organizationId"></param>
            <param name="verbose"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetAllSites(Prime.Models.Api.OrganizationSearchOptions)">
            <summary>
            Gets all Sites.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteById(System.Int32)">
            <summary>
            Gets a specific Site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateSite(System.Int32)">
            <summary>
            Creates a new Site.
            <param name="organizationId"></param>
            </summary>
        </member>
        <member name="M:Prime.Controllers.SitesController.UpdateSite(System.Int32,Prime.ViewModels.CommunitySiteUpdateModel)">
            <summary>
            Updates a specific Site.
            </summary>
            <param name="siteId"></param>
            <param name="updatedSite"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.SetSiteCompleted(System.Int32)">
            <summary>
            Set a sites completed state.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.RemoveSiteCompleted(System.Int32)">
            <summary>
            Remove a sites completed state.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.SetSiteAdjudicator(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Add a site's assigned adjudicator.
            </summary>
            <param name="siteId"></param>
            <param name="adjudicatorId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.RemoveSiteAdjudicator(System.Int32)">
            <summary>
            Remove an site's assigned adjudicator.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.DeleteSite(System.Int32)">
            <summary>
                Deletes a specific Site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.SubmitSiteRegistration(System.Int32,Prime.ViewModels.SiteSubmissionViewModel)">
            <summary>
            Submits the given site for adjudication.
            </summary>
            <param name="siteId"></param>
            <param name="updatedSite"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateBusinessLicence(System.Int32,Prime.Models.BusinessLicence,System.Guid)">
            <summary>
            Creates a new Business Licence.
            </summary>
            <param name="documentGuid"></param>
            <param name="businessLicence"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.UpdateBusinessLicence(System.Int32,System.Int32,Prime.Models.BusinessLicence)">
            <summary>
            Updates an existing Business Licence.
            </summary>
            <param name="businessLicence"></param>
            <param name="siteId"></param>
            <param name="businessLicenceId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateBusinessLicenceDocument(System.Int32,System.Int32,System.Guid)">
            <summary>
            Creates a new Business Licence Document.
            </summary>
            <param name="documentGuid"></param>
            <param name="siteId"></param>
            <param name="businessLicenceId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.RemoveBusinessLicenceDocument(System.Int32,System.Int32)">
            <summary>
            Deletes a sites business Licence Document.
            </summary>
            <param name="siteId"></param>
            <param name="businessLicenceId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetBusinessLicence(System.Int32,System.Boolean)">
            <summary>
            Gets all business Licences for a site or the latest business licence.
            </summary>
            <param name="siteId"></param>
            <param name="latest"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateSiteAdjudicationDocument(System.Int32,System.Guid)">
            <summary>
            Creates a new site adjudication document for a site.
            </summary>
            <param name="documentGuid"></param>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteAdjudicationDocuments(System.Int32)">
            <summary>
            Gets all site adjudication documents for a site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteAdjudicationDocument(System.Int32,System.Int32)">
            <summary>
            Get the site adjudication documents download token.
            </summary>
            <param name="siteId"></param>
            <param name="documentId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.PecAssignable(System.Int32,System.String)">
            <summary>
            Check if a given PEC is assignable.
            </summary>
            <param name="siteId"></param>
            <param name="pec"></param>
            <returns></returns>
        </member>
        <member name="M:Prime.Controllers.SitesController.UpdatePecCode(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Update the PEC code.
            </summary>
            <param name="siteId"></param>
            <param name="pecCode"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetBusinessLicenceDocumentToken(System.Int32,System.Int32)">
            <summary>
            Gets a download token for the latest business licence on a site.
            </summary>
            <param name="siteId"></param>
            <param name="businessLicenceId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.SendRemoteUsersEmailAdmin(System.Int32)">
            <summary>
            Send HIBC an email when remote users are updated for a submitted site
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.SendSiteReviewedNotificationEmail(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Send site reviewed notification email to provider enrolment team
            </summary>
            <param name="siteId"></param>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="M:Prime.Controllers.SitesController.ApproveSite(System.Int32)">
            <summary>
            Approve a site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.DeclineSite(System.Int32)">
            <summary>
            Decline a site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.EnableEditingSite(System.Int32)">
            <summary>
            Enable editing a site
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.UnrejectSite(System.Int32)">
            <summary>
            Unreject a site
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateSiteRegistrationNote(System.Int32,Prime.Models.Api.FromBodyText)">
            <summary>
            Creates a new site registration note on a site.
            </summary>
            <param name="siteId"></param>
            <param name="note"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteRegistrationNotes(System.Int32)">
            <summary>
            Gets all of the site registration notes for a specific site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSitesByRemoteUserInfo(System.Collections.Generic.IEnumerable{Prime.ViewModels.CertSearchViewModel})">
            <summary>
            Searches for Remote User Certifications by College Code + Licence Number and returns related Site data
            </summary>
            <param name="certifications"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteBusinessEvents(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets all of the business events for a specific site's event log.
            </summary>
            <param name="siteId"></param>
            <param name="businessEventTypeCodes"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.DeleteSiteAdjudicationDocument(System.Int32)">
            <summary>
            Delete the site's adjudication document
            </summary>
            <param name="documentId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.CreateSiteNotification(System.Int32,System.Int32,Prime.Models.Api.FromBodyData{System.Int32})">
            <summary>
            Creates a new site notification on a site registration note.
            </summary>
            <param name="siteId"></param>
            <param name="siteRegistrationNoteId"></param>
            <param name="assigneeId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.DeleteSiteNotification(System.Int32,System.Int32)">
            <summary>
            deletes the notification on an site registration note.
            </summary>
            <param name="siteId"></param>
            <param name="siteRegistrationNoteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetSiteNotifications(System.Int32)">
            <summary>
            Get the site registration notes on an enrollee that has a notification for current admin user.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.DeleteSiteNotifications(System.Int32)">
            <summary>
            Delete all notifications on a site
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.FlagSite(System.Int32,Prime.Models.Api.FromBodyData{System.Boolean})">
            <summary>
            Sets a site's flag, which serves as a reminder
            for an adjudicator to come back to this site
            </summary>
            <param name="siteId"></param>
            <param name="flagged"></param>
        </member>
        <member name="M:Prime.Controllers.SitesController.GetIndividualDeviceProviders(System.Int32)">
            <summary>
            Gets the Individual Device Providers for a Device Provider Site.
            </summary>
            <param name="siteId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.Submit(System.Int32,Prime.ViewModels.EnrolleeUpdateModel)">
            <summary>
            Submits the given enrollee through Auto/manual adjudication.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.ApproveSubmission(System.Int32)">
            <summary>
            Approves the current submission for an Enrolle.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.AcceptToa(System.Int32,System.Nullable{System.Guid})">
            <summary>
            Accepts the current TOA for an Enrolle.
            Document GUID of a collaborating ID document is required for users with Identity Assurance less than three.
            </summary>
            <param name="enrolleeId"></param>
            <param name="documentGuid"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.DeclineToa(System.Int32)">
            <summary>
            Declines the current TOA for an Enrolle.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.EnableEditing(System.Int32)">
            <summary>
            Puts the Enrolle back into an editable state.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.CancelToaAssignment(System.Int32)">
            <summary>
            Puts the Enrolle back into Under Review from Requires TOA.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.LockProfile(System.Int32)">
            <summary>
            Locks the Enrolle's profile.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.DeclineProfile(System.Int32)">
            <summary>
            Declines the Enrolle's profile, expiring their credentials and Terms of Access.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.RerunRules(System.Int32)">
            <summary>
            Re-runs the automatic adjudication rules for an Enrollee under review.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.RerunAutomaticAdjudicationRules">
            <summary>
            Re-runs the automatic adjudication rules for all applicable Enrollees.
            </summary>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.AssignToaAgreementType(System.Int32,Prime.Models.AgreementType)">
            <summary>
            Assign a TOA agreement type to the latest submission.
            </summary>
            <param name="enrolleeId"></param>
            <param name="agreementType"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.SetEnrolleeManualFlag(System.Int32)">
            <summary>
            Sets an Enrollee's always manual flag, forcing them to always be sent to manual adjudication
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.RemoveEnrolleeManualFlag(System.Int32)">
            <summary>
            Removes an Enrollee's always manual flag, allowing them to go through the adjudication rules engine normally.
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.SubmissionsController.ConfirmLatestSubmission(System.Int32)">
            <summary>
            Confirm an Enrollee's most recent submission
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Controllers.WebhooksController.Webhook(System.String,System.String,Prime.Models.VerifiableCredentials.WebhookData)">
            <summary>
            Handle webhook events sent from the issuing agent.
            </summary>
            <param name="apiKey"></param>
            <param name="topic"></param>
            <param name="data"></param>
        </member>
        <member name="M:Prime.Engines.AgreementEngine.DetermineAgreementType(Prime.DTOs.AgreementEngine.AgreementEngineDto)">
            <summary>
            Determines the type of Agreement to asign to an Enrollee.
            May return null if no automatic Agreement Type could be determined.
            </summary>
        </member>
        <member name="M:Prime.ClaimsPrincipalExtensions.GetPrimeUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the Guid of the logged in user. If there is no logged in user, this will return Guid.Empty
            </summary>
        </member>
        <member name="M:Prime.ObjectExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            </summary>
            <param name="data">The item to check for nullity.</param>
            <param name="name">The name to use when throwing an exception, if necessary</param>
        </member>
        <member name="M:Prime.ObjectExtensions.ThrowIfNull``1(``0)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            No parameter name is specified.
            </summary>
            <param name="data">The item to check for nullity.</param>
        </member>
        <member name="M:Prime.QueryableExtensions.If``1(System.Linq.IQueryable{``0},System.Boolean,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Conditionally applys a new condition to the query.
            </summary>
        </member>
        <member name="T:Prime.Helpers.RequestLoggingMiddleware">
            <summary>
            Based on https://blog.elmah.io/asp-net-core-request-logging-middleware/
            </summary>
        </member>
        <member name="M:Prime.Helpers.RequestLoggingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Called once in <c>Startup</c>
            </summary>
            <param name="next"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Prime.Helpers.SentryErrorReporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Prime.Helpers.SentryErrorReporter" /> class.
            </summary>
        </member>
        <member name="M:Prime.Helpers.SentryErrorReporter.CaptureAsync(System.Exception)">
            <summary>
            Captures the specified exception asynchronously and hands it off to an error handling service.
            </summary>
            <param name="exception">The exception.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">exception</exception>
        </member>
        <member name="M:Prime.HttpClients.BaseClient.CreateStringContent(System.Object)">
            <summary>
            Creates JSON StringContent based on the serialization settings set in the constructor
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Prime.HttpClients.DummyCollegeLicenceClient">
            <summary>
            Pharmanet API is not availible in local dev, so a dummy client is used instead to return test data.
            </summary>
        </member>
        <member name="M:Prime.HttpClients.IDocumentManagerClient.InitializeUploadAsync(System.String,System.String)">
            <summary>
            Initializes the file upload process with the Document Manager.
            </summary>
            <param name="filename"></param>
            <param name="fileSize"></param>
            <returns></returns>
        </member>
        <member name="M:Prime.HttpClients.IDocumentManagerClient.FinalizeUploadAsync(System.Guid,System.String)">
            <summary>
            Moves a temporary file upload to its final destination and marks it as "submitted".
            </summary>
            <returns>The file name; or null if not successful.</returns>
        </member>
        <member name="M:Prime.HttpClients.IDocumentManagerClient.CreateDownloadTokenAsync(System.Guid)">
            <summary>
            Creates a short-lived, single use download token that can be used to download the Document directly from the Document Manager.
            </summary>
            <param name="documentGuid"></param>
        </member>
        <member name="M:Prime.HttpClients.IDocumentManagerClient.SendFileAsync(System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads a file directly to the Document Manager, rather than using the regular chunked file upload process.
            Generally used to persist files generated by the PRIME API; not for user uploaded files.
            </summary>
            <param name="file"></param>
            <param name="filename"></param>
            <param name="destinationFolder"></param>
            <returns>The Document GUID returned from the Document Manager.</returns>
        </member>
        <member name="M:Prime.HttpClients.IDocumentManagerClient.GetDocumentAsync(System.Guid)">
            <summary>
            Downloads a Document from the Document Manager.
            Generally only used when downloading a file without using the frontend, since this requires the file to be transferred to the API first and then again to the user.
            </summary>
            <param name="documentGuid"></param>
            <returns>The file as HttpContent, or null if unsuccessful.</returns>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.GetClient(System.String)">
            <summary>
            Gets the Keycloak Client representation by ClientId.
            Returns null if unccessful.
            </summary>
            <param name="clientId"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.AssignClientRole(System.Guid,System.String,System.String)">
            <summary>
            Assigns a Client Role to the user, if it exists.
            Returns true if the operation was successful.
            </summary>
            <param name="userId"></param>
            <param name="clientId"></param>
            <param name="roleName"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.AssignRealmRole(System.Guid,System.String)">
            <summary>
            Assigns a realm-level role to the user, if it exists.
            Returns true if the operation was successful.
            </summary>
            <param name="userId"></param>
            <param name="roleName"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.GetClientRole(System.String,System.String)">
            <summary>
            Gets the Keycloak Client Role representation by name.
            Returns null if unccessful or if no roles of that name exist on the client.
            </summary>
            <param name="clientId"></param>
            <param name="roleName"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.GetRealmRole(System.String)">
            <summary>
            Gets the Keycloak Role representation by name.
            Returns null if unccessful.
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.GetUser(System.Guid)">
            <summary>
            Gets the Keycloak User Representation for the user.
            Returns null if unccessful.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.HttpClients.IKeycloakAdministrationClient.UpdateUser(System.Guid,Prime.HttpClients.KeycloakApiDefinitions.UserRepresentation)">
            <summary>
            Updates the User with the given Keycloak User Representation.
            Returns true if the operation was successful.
            </summary>
            <param name="userId"></param>
            <param name="userRep"></param>
        </member>
        <member name="T:Prime.HttpClients.KeycloakApiDefinitions.Client">
            <summary>
            This is not the entire Keycloak Client Representation! See https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_clientrepresentation.
            </summary>
        </member>
        <member name="P:Prime.HttpClients.KeycloakApiDefinitions.Client.ClientId">
            <summary>
            ID referenced in URIs and tokens
            </summary>
        </member>
        <member name="P:Prime.HttpClients.KeycloakApiDefinitions.Client.Id">
            <summary>
            Guid-like unique identifier
            </summary>
        </member>
        <member name="P:Prime.HttpClients.KeycloakApiDefinitions.Client.Name">
            <summary>
            Display name
            </summary>
        </member>
        <member name="T:Prime.HttpClients.KeycloakApiDefinitions.UserRepresentation">
            <summary>
            This is not the entire Keycloak User Representation! See https://www.keycloak.org/docs-api/5.0/rest-api/index.html#_userrepresentation.
            This is a sub-set of the properties so we don't accidentally overwrite anything when doing the PUT.
            </summary>
        </member>
        <member name="M:Prime.Models.Address.SetValues(Prime.Models.Address)">
            <summary>
            Updates this Address with the values from another address, if not null.
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:Prime.Models.Api.GpidValidationParameters.CollegeRecord.CollegeName">
            <summary>
            The two-character College Prefix, such as "P1" for the College of Pharmacists of BC
            </summary>
        </member>
        <member name="P:Prime.Models.Api.GpidValidationParameters.CollegeRecord.CollegeId">
            <summary>
            The Licence Number, typically 5 digits.
            </summary>
        </member>
        <member name="T:Prime.Models.Api.GpidValidationResponse">
            <summary>
            The results of matching the parameters against the Enrollee.
            Returned text is "true" if the parameter matches, "false" if it does not, or "missing" if the enrollee has no data for that parameter.
            </summary>
        </member>
        <member name="P:Prime.Models.Certification.PractitionerId">
            <summary>
            5-digit numeric number that the PharmaNet College API expects
            </summary>
        </member>
        <member name="P:Prime.Models.PartyCertification.PractitionerId">
            <summary>
            5-digit numeric number that the PharmaNet College API expects
            </summary>
        </member>
        <member name="P:Prime.Models.PartyCertification.Practice">
            <summary>
            E.g. Reproductive Health - Sexually Transmitted Infections
            </summary>
        </member>
        <member name="M:Prime.Models.BaseDocumentUpload.HasFileExtension(System.String)">
            <summary>
            Returns true if this Document's Filename ends in the supplied extension (with or without the ".")
            </summary>
            <param name="extension"></param>
        </member>
        <member name="T:Prime.Models.Documents.File">
            <summary>
            An abstraction of a document in memory, not specific to a document upload
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.CurrentStatus">
            <summary>
            Gets the most recent Enrolment Status on the Enrollee.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.PreviousStatus">
            <summary>
            Gets the *second* most recent Enrolment Status on the Enrollee.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.AssignedTOAType">
            <summary>
            Gets the most recent TOA that was assigned during submission of the enrolment.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.AppliedDate">
            <summary>
            The date of the Enrollee's most recent application.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.ApprovedDate">
            <summary>
            The date of the Enrollee's most recent manual or automatic approval.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.CurrentAgreementId">
            <summary>
            The Id of the Version of the Enrollee's most recently accepted Agreement.
            </summary>
        </member>
        <member name="P:Prime.Models.Enrollee.ExpiryDate">
            <summary>
            The expiry date of the Enrollee's most recently accepted Agreement.
            </summary>
        </member>
        <member name="M:Prime.Models.Enrollee.HasLatestAgreement(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns true if the Enrollee's most recently accepted Agreement has no newer versions.
            Makes no determination if said Agreement is of the correct type for the Enrollee.
            </summary>
        </member>
        <member name="T:Prime.Models.HealthAuthorities.HealthAuthorityTechnicalSupportVendor">
            <summary>
            Associative entity/table between HealthAuthorityTechnicalSupport and
            Vendors they support.
            </summary>
        </member>
        <member name="T:Prime.Models.IdentifierType">
            <summary>
            This is related to PLR-sourced data
            </summary>
        </member>
        <member name="P:Prime.Models.IdentifierType.Code">
            <summary>
            Identifier OID, e.g. 2.16.840.1.113883.3.40.2.20
            </summary>
        </member>
        <member name="P:Prime.Models.IdentifierType.Name">
            <summary>
            Concept referenced by OID, e.g. RNPID aka "British Columbia Registered Nurse Practitioner ID"
            </summary>
        </member>
        <member name="M:Prime.Models.Party.SetPartyTypes(Prime.Models.PartyType[])">
            <summary>
            Adds new PartyEnrolments with the given PartyTypes if not already present.
            </summary>
            <param name="types"></param>
        </member>
        <member name="T:Prime.Models.PermissionsRecord">
            <summary>
            A DTO used to determine if a UserBound Model a) exists and b) can be accessed by the current user.
            </summary>
        </member>
        <member name="T:Prime.Models.PharmanetTransactionLog">
             <summary>
             PRIME copy of header information of Pharmanet transactions
             (originally stored in ODR database).
            
             ** IMPORTANT **
             Changes to this model will likely affect the scripts executed by the Cron job defined in `infrastructure\cron-jobs\retrieve-pnet-logs.cron.yml`.
             On the other hand, this model is not used (much) by the .NET API code.
             </summary>
        </member>
        <member name="T:Prime.Models.PlrProvider">
            <summary>We rely on PLR's database integrity checks rather than enforcing any in our system.</summary>
        </member>
        <member name="P:Prime.Models.PlrProvider.Ipc">
            <summary>PLR's internal identifier, Internal Party Code.</summary>
        </member>
        <member name="P:Prime.Models.PlrProvider.Cpn">
            <summary>A physical person in multiple roles will have a common CPN (PLR's Common Party Number) for each PLR record representing that role, e.g. a person who is both a MD and Pharmacist</summary>
        </member>
        <member name="P:Prime.Models.PlrProvider.IdentifierType">
            <summary>The type of identifier that <c>CollegeId</c> represents.</summary>
        </member>
        <member name="P:Prime.Models.PlrProvider.MspId">
            <summary>HIBC's Ministry Practitioner ID.</summary>
        </member>
        <member name="T:Prime.Models.Plr.CollegeForPlrRoleType">
            <summary>
            The College (if exists) for a PLR Role Type
            </summary>
        </member>
        <member name="M:Prime.Models.BusinessDay.IsOpen(System.TimeSpan)">
            <summary>
            Does the supplied time fall between the Start Time and End Time?
            </summary>
        </member>
        <member name="M:Prime.Models.BusinessDay.IsOpen(System.DateTimeOffset)">
            <summary>
            Does the supplied time fall between the Start Time and End Time?
            Only the time portion of the input parameter is considered.
            </summary>
        </member>
        <member name="P:Prime.Models.CommunitySite.BusinessLicence">
            <summary>
            Gets the most recently uploaded business licence
            </summary>
        </member>
        <member name="M:Prime.Models.CommunitySite.IsWithinRenewalPeriod">
            <summary>
            Site submissions are considered renewals starting 30 days before the expiry of its current Business Licence.
            For sites without expiry dates on their BL, expiry is considered to be one year after the Site's submitted date.
            </summary>
        </member>
        <member name="P:Prime.Models.RemoteUser.Notified">
            <summary>
            Whether there was an attempt to notify Remote User by email
            </summary>
        </member>
        <member name="P:Prime.Models.Site.Status">
            <summary>
            Gets the most recent Status of the Site.
            </summary>
        </member>
        <member name="M:Prime.Models.Site.DaysOpen(System.Nullable{System.DateTimeOffset})">
            <summary>
            Days in which the business has any business hours.
            Only the time portion of the input parameter is considered.
            </summary>
        </member>
        <member name="T:Prime.Models.VerifiableCredentials.CredentialOfferRequest">
            <summary>
            A credential offer to send to aries agent.
            </summary>
        </member>
        <member name="P:Prime.Models.VerifiableCredentials.CredentialOfferRequest.ConnectionId">
            <summary>
            Gets or sets the connectionId.
            </summary>
        </member>
        <member name="P:Prime.PrimeConfiguration.VerifiableCredentialApi">
            <summary>
            Aries Prime Agent
            </summary>
        </member>
        <member name="P:Prime.PrimeConfiguration.AddressAutocompleteApi">
            <summary>
            Canada Post Address Validation
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.GetEnrolleeAgreementAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the agreement for an enrollee by ID, if it exists (No Tracking).
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.GetEnrolleeAgreementsAsync(System.Int32,Prime.Models.Api.AgreementFilters)">
            <summary>
            Get the list of agreements for an enrollee, using filters (No Tracking).
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.GetCurrentAgreementAsync(System.Int32)">
            <summary>
            Gets the Enrollee's newest Agreement
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.AcceptCurrentEnrolleeAgreementAsync(System.Int32)">
            <summary>
            Accepts the Enrollee's newest Agreement, if it hasn't already been accepted.
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.ExpireCurrentEnrolleeAgreementAsync(System.Int32)">
            <summary>
            Expires the Enrollee's most recently accepted Agreement.
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleeAgreementService.RenderHtml(Prime.Models.Agreement[])">
            <summary>
            Renders the HTML text of the Agreement for viewing on the frontend.
            </summary>
        </member>
        <member name="M:Prime.Services.EnrolleePaperSubmissionService.UpdateAgreementAsync(System.Int32,Prime.ViewModels.PaperEnrollees.PaperEnrolleeAgreementViewModel)">
            <summary>
            Also updates the Submission for the Enrollee (to set the assigned Agreement Type).
            </summary>
            <param name="enrolleeId"></param>
            <param name="viewModel"></param>
        </member>
        <member name="M:Prime.Services.EnrolleePaperSubmissionService.LinkEnrolleeToPaperEnrolmentAsync(System.Int32,System.Int32)">
            <summary>
            Links an Enrollee to a Paper Enrollee.
            Requires that the EnrolleeLinkedEnrolment already exist (see SetLinkedGpidAsync)
            </summary>
            <param name="enrolleeId"></param>
            <param name="paperEnrolleeId"></param>
        </member>
        <member name="M:Prime.Services.EnrolleePaperSubmissionService.SetLinkedGpidAsync(System.Int32,System.String)">
            <summary>
            Sets the GPID on the Enrollee's EnrolleeLinkedEnrolment, creating one if necessary.
            Cannot set the Linked GPID on a Paper Enrollee or on an Enrollee that has already been linked to a Paper Enrolment.
            </summary>
            <param name="enrolleeId"></param>
            <param name="userProvidedGpid"></param>
        </member>
        <member name="M:Prime.Services.EnrolleeService.GetActiveGpidAsync(System.Guid)">
            <summary>
            Gets the GPID for an Enrollee.
            Returns null if no Enrollee exists with the given UserId or if the Enrollee is in the 'Declined' status
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Prime.Services.EnrolleeService.GetSelfDeclarationsAsync(System.Int32)">
            <summary>
            Returns a View Model for each Self Declaration Question, including ones answered "No"
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Services.EnrolleeSubmissionService.GetEnrolleeSubmissionBeforeDateAsync(System.Int32,System.DateTimeOffset)">
            Get the most recent submission before a given date.
        </member>
        <member name="M:Prime.Services.GisService.UpdateMohKeycloakUserInfo(Prime.Models.Party)">
            <summary>
            Updates the User's email and phone number in MoH Keycloak.
            </summary>
            <param name="party"></param>
        </member>
        <member name="M:Prime.Services.IBusinessEventService.CreateSiteEventAsync(System.Int32,System.String)">
            <summary>
            Creates a Site Event, with the PartyId set to the Party responsible for the Site; i.e. SigningAuthority for Community Sites, Authorized User for Health Authority Sites
            </summary>
            <param name="siteId"></param>
            <param name="description"></param>
        </member>
        <member name="T:Prime.Services.IDocumentAccessTokenService">
            <summary>
            This services manages the tokens used for persistent external access to a Document, such as the links to Business Licenses sent to HIBC during site registration.
            </summary>
        </member>
        <member name="M:Prime.Services.IEnrolleeAgreementService.IsOboToRuAgreementTypeChangeAsync(System.Int32)">
            <summary>
            Returns whether the enrollee's current agreement type is OBO and changing to RU if their agreement would be
            assigned as of today.  Returns <c>true</c> if such a change, <c>false</c> if not such a change OR
            if cannot be automatically determined which agreement would be assigned OR enrollee does yet have an agreement
            </summary>
        </member>
        <member name="M:Prime.Services.IEnrolleePaperSubmissionService.PaperSubmissionIsUpdateableAsync(System.Int32)">
            <summary>
            Returns true if the Enrollee 1) exits 2) was created from a paper submission and 3) is currently "Under Review".
            </summary>
            <param name="enrolleeId"></param>
        </member>
        <member name="M:Prime.Services.ISiteService.MarkUsersAsNotifiedAsync(System.Collections.Generic.IEnumerable{Prime.Models.RemoteUser})">
            <summary>
            Save the fact that the given <c>notifiedUsers</c> were notified by email.
            </summary>
        </member>
        <member name="M:Prime.Services.ISiteService.GetSiteBusinessEventsAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns business events related to a site or to the organization that site belongs to.
            </summary>
        </member>
        <member name="M:Prime.Services.ISubmissionService.BulkRerunRulesAsync">
            <summary>
            Re-runs the adjudication rules for all Enrollees that:
            1. Are Under Review
            2. Have no assigned Adjudicator
            3. Have one or more Status Reasons relating to the Parmanet College Validation API
            </summary>
        </member>
        <member name="M:Prime.Services.OrganizationAgreementService.GetOrgAgreementAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the Agreement + text of a given Org Agreement, optionally with the text in the form of a Base 64 encoded PDF.
            Returns null if the Agreement does not exist on the given organization.
            </summary>
            <param name="organizationId"></param>
            <param name="agreementId"></param>
            <param name="asEncodedPdf"></param>
            <returns></returns>
        </member>
        <member name="M:Prime.Services.OrganizationAgreementService.GetSignableOrgAgreementAsync(System.Int32,Prime.Models.AgreementType)">
            <summary>
            Returns a Base64 encoded PDF of a given org agreement for signing.
            </summary>
            <param name="organizationId"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Prime.Services.OrganizationService.EnsureUpdatedOrgAgreementAsync(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Org Agreement of type appropriate for the indicated site if none exist or a newer version is available.
            Otherwise, returns the newest existing Agreement of that type.
            Returns null if the Site doesn't exist on the Organization.
            </summary>
        </member>
        <member name="M:Prime.Services.PartyService.CreateOrUpdatePartyAsync(Prime.ViewModels.Parties.IPartyChangeModel,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Creates or updates a party based on the User ID of the supplied user, and
            returns the Id of the affected Party.
            </summary>
        </member>
        <member name="M:Prime.Services.PhsaService.UpdateKeycloakUserInfo(System.Guid,Prime.ViewModels.Parties.PhsaChangeModel)">
            <summary>
            Updates the User's email, phone number, and phone extension in Keycloak. Will remove any attribute set to null. Also gives the User the role(s) relevant to the PartyType(s) selected.
            Returns true if the operation was successful.
            </summary>
            <param name="userId"></param>
            <param name="party"></param>
        </member>
        <member name="T:Prime.Services.Rules.AutomaticAdjudicationRule">
            <summary>
            Automatic Adjudication Rules will add Status Reasons to the current status on a failure.
            </summary>
        </member>
        <member name="T:Prime.Services.Rules.MinorUpdateRule">
            <summary>
            Conditions under which a submission is considered to be minor enough to not warrant going through the (Auto) adjudication proccess.
            Does not alter the enrollee object.
            </summary>
        </member>
        <member name="T:Prime.Services.Rules.CurrentToaRule">
            <summary>
            Enrollee has a signed TOA and it is the newest verson
            </summary>
        </member>
        <member name="T:Prime.Services.Rules.CorrectToaRule">
            <summary>
            Enrollee has a signed a TOA that is of the type the agreementEngine would assign
            at this point in time. In the case the agreementEngine returns indetermanate, return false.
            </summary>
        </member>
        <member name="T:Prime.Services.Rules.DateRule">
            <summary>
            Update must be more than 30 days away from renewal date
            </summary>
        </member>
        <member name="T:Prime.Services.Rules.AllowableChangesRule">
            <summary>
            Update must only change certain allowed properties.
            See `InitComparitor` method to see what is considered a minor update.
            </summary>
        </member>
        <member name="M:Prime.Services.SoapService.SplitTelecomNumber(System.String)">
             <summary>
            
             </summary>
             <param name="telecomNumber">Expects a 10-digit string but works with other input</param>
             <returns>A 2-element array containing area code and local number, if input was a 10-digit string.
                 Otherwise, simply returns <c>telecomNumber</c> as the single element in the array</returns>
        </member>
        <member name="M:Prime.Services.SubmissionRulesService.QualifiesForAutomaticAdjudicationAsync(Prime.Models.Enrollee)">
            <summary>
            All rules must pass for this enrollee to qualify to be automatically adjudicated.
            Failing rules will add Status Reasons to the current status.
            </summary>
        </member>
        <member name="M:Prime.Services.SubmissionRulesService.QualifiesAsMinorUpdateAsync(Prime.Models.Enrollee,Prime.ViewModels.EnrolleeUpdateModel,System.Collections.Generic.List{System.Int32})">
            <summary>
            All rules must pass for an update to be considered minor enough to not warrant going through the (Auto) adjudication proccess.
            These rules will not alter the enrollee object.
            </summary>
        </member>
        <member name="M:Prime.Services.SubmissionService.PerformEnrolleeStatusActionAsync(System.Int32,Prime.Models.Api.EnrolleeStatusAction,System.Object)">
            <summary>
            Performs a Status Action on an Enrollee.
            Returns true if the Action was successfully performed.
            </summary>
        </member>
        <member name="T:Prime.ViewModels.IContactViewModel">
            <summary>
            Common interface for more flexibility and re-use.
            </summary>
        </member>
        <member name="M:Prime.ViewModels.Parties.AuthorizedUserChangeModel.UpdateAuthorizedUser(Prime.Models.AuthorizedUser,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Updates the given Party with values from this CreateModel and the User. Also sets the relevant types
            in the Party's PartyEnrolments, and returns the updated Party for convenience.
            </summary>
        </member>
        <member name="M:Prime.ViewModels.Parties.GisChangeModel.UpdateGisParty(Prime.Models.GisEnrolment,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Updates the given Party with values from this CreateModel and the User. Also sets the relevant types
            in the Party's PartyEnrolments, and returns the updated Party for convenience.
            </summary>
        </member>
        <member name="P:Prime.ViewModels.Parties.PhsaChangeModel.Email">
            <summary> Required </summary>
        </member>
        <member name="P:Prime.ViewModels.Parties.PhsaChangeModel.Phone">
            <summary> Required </summary>
        </member>
        <member name="M:Prime.ViewModels.Parties.PhsaChangeModel.UpdateParty(Prime.Models.Party,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Updates the given Party with values from this CreateModel and the User. Also sets the relevant types in the Party's PartyEnrolments.
            Returns the updated Party for convienience.
            </summary>
            <param name="party"></param>
            <param name="user"></param>
        </member>
        <member name="M:Prime.ViewModels.Parties.SigningAuthorityChangeModel.UpdateParty(Prime.Models.Party,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Updates the given Party with values from this SigningAuthorityCreateModel and the User.
            Also sets SigningAuthority in the Party's PartyEnrolments, and returns the updated Party
            for convenience.
            </summary>
        </member>
        <member name="P:Prime.ViewModels.HealthAuthorities.TechnicalSupportContactViewModel.VendorsSupported">
            <summary>
            Codes representing the vendors this Technical Support contact works with
            </summary>
        </member>
        <member name="P:Prime.ViewModels.SpecialAuthorityTransformation.SatEnrolleeDemographicChangeModel.UserId">
            <summary>
            Identifier from Keycloak instance
            </summary>
        </member>
        <member name="P:Prime.ViewModels.SpecialAuthorityTransformation.SatEnrolleeDemographicChangeModel.HPDID">
            <summary>
            Identifier from BCSC.  Health Practitioner Direct Identifier
            </summary>
        </member>
        <member name="P:Prime.ViewModels.SpecialAuthorityTransformation.SatEnrolleeDemographicChangeModel.VerifiedAddress">
            <summary>
            Originating from BCSC
            </summary>
        </member>
    </members>
</doc>
